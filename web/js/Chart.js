!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(function(){try{return require("moment")}catch(t){}}()):"function"==typeof define&&define.amd?define(["require"],function(t){return e(function(){try{return t("moment")}catch(e){}}())}):t.Chart=e(t.moment)}(this,function(t){"use strict";function e(t){var e,n,i,a=t[0]/255,o=t[1]/255,r=t[2]/255,s=Math.min(a,o,r),l=Math.max(a,o,r),d=l-s;return l==s?e=0:a==l?e=(o-r)/d:o==l?e=2+(r-a)/d:r==l&&(e=4+(a-o)/d),e=Math.min(60*e,360),e<0&&(e+=360),i=(s+l)/2,n=l==s?0:i<=.5?d/(l+s):d/(2-l-s),[e,100*n,100*i]}function n(t){var e,n,i,a=t[0],o=t[1],r=t[2],s=Math.min(a,o,r),l=Math.max(a,o,r),d=l-s;return n=0==l?0:d/l*1e3/10,l==s?e=0:a==l?e=(o-r)/d:o==l?e=2+(r-a)/d:r==l&&(e=4+(a-o)/d),e=Math.min(60*e,360),e<0&&(e+=360),i=l/255*1e3/10,[e,n,i]}function i(t){var n=t[0],i=t[1],a=t[2],o=e(t)[0],r=1/255*Math.min(n,Math.min(i,a)),a=1-1/255*Math.max(n,Math.max(i,a));return[o,100*r,100*a]}function a(t){var e,n,i,a,o=t[0]/255,r=t[1]/255,s=t[2]/255;return a=Math.min(1-o,1-r,1-s),e=(1-o-a)/(1-a)||0,n=(1-r-a)/(1-a)||0,i=(1-s-a)/(1-a)||0,[100*e,100*n,100*i,100*a]}function o(t){return on[JSON.stringify(t)]}function s(t){var e=t[0]/255,n=t[1]/255,i=t[2]/255;e=e>.04045?Math.pow((e+.055)/1.055,2.4):e/12.92,n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92,i=i>.04045?Math.pow((i+.055)/1.055,2.4):i/12.92;var a=.4124*e+.3576*n+.1805*i,o=.2126*e+.7152*n+.0722*i,r=.0193*e+.1192*n+.9505*i;return[100*a,100*o,100*r]}function l(t){var e,n,i,a=s(t),o=a[0],r=a[1],l=a[2];return o/=95.047,r/=100,l/=108.883,o=o>.008856?Math.pow(o,1/3):7.787*o+16/116,r=r>.008856?Math.pow(r,1/3):7.787*r+16/116,l=l>.008856?Math.pow(l,1/3):7.787*l+16/116,e=116*r-16,n=500*(o-r),i=200*(r-l),[e,n,i]}function d(t){return z(l(t))}function u(t){var e,n,i,a,o,r=t[0]/360,s=t[1]/100,l=t[2]/100;if(0==s)return o=255*l,[o,o,o];n=l<.5?l*(1+s):l+s-l*s,e=2*l-n,a=[0,0,0];for(var d=0;d<3;d++)i=r+1/3*-(d-1),i<0&&i++,i>1&&i--,o=6*i<1?e+6*(n-e)*i:2*i<1?n:3*i<2?e+(n-e)*(2/3-i)*6:e,a[d]=255*o;return a}function h(t){var e,n,i=t[0],a=t[1]/100,o=t[2]/100;return 0===o?[0,0,0]:(o*=2,a*=o<=1?o:2-o,n=(o+a)/2,e=2*a/(o+a),[i,100*e,100*n])}function c(t){return i(u(t))}function f(t){return a(u(t))}function p(t){return o(u(t))}function m(t){var e=t[0]/60,n=t[1]/100,i=t[2]/100,a=Math.floor(e)%6,o=e-Math.floor(e),r=255*i*(1-n),s=255*i*(1-n*o),l=255*i*(1-n*(1-o)),i=255*i;switch(a){case 0:return[i,l,r];case 1:return[s,i,r];case 2:return[r,i,l];case 3:return[r,s,i];case 4:return[l,r,i];case 5:return[i,r,s]}}function v(t){var e,n,i=t[0],a=t[1]/100,o=t[2]/100;return n=(2-a)*o,e=a*o,e/=n<=1?n:2-n,e=e||0,n/=2,[i,100*e,100*n]}function x(t){return i(m(t))}function y(t){return a(m(t))}function k(t){return o(m(t))}function w(t){var e,n,i,a,o=t[0]/360,s=t[1]/100,l=t[2]/100,d=s+l;switch(d>1&&(s/=d,l/=d),e=Math.floor(6*o),n=1-l,i=6*o-e,0!=(1&e)&&(i=1-i),a=s+i*(n-s),e){default:case 6:case 0:r=n,g=a,b=s;break;case 1:r=a,g=n,b=s;break;case 2:r=s,g=n,b=a;break;case 3:r=s,g=a,b=n;break;case 4:r=a,g=s,b=n;break;case 5:r=n,g=s,b=a}return[255*r,255*g,255*b]}function M(t){return e(w(t))}function _(t){return n(w(t))}function C(t){return a(w(t))}function S(t){return o(w(t))}function P(t){var e,n,i,a=t[0]/100,o=t[1]/100,r=t[2]/100,s=t[3]/100;return e=1-Math.min(1,a*(1-s)+s),n=1-Math.min(1,o*(1-s)+s),i=1-Math.min(1,r*(1-s)+s),[255*e,255*n,255*i]}function I(t){return e(P(t))}function A(t){return n(P(t))}function D(t){return i(P(t))}function T(t){return o(P(t))}function F(t){var e,n,i,a=t[0]/100,o=t[1]/100,r=t[2]/100;return e=3.2406*a+o*-1.5372+r*-.4986,n=a*-.9689+1.8758*o+.0415*r,i=.0557*a+o*-.204+1.057*r,e=e>.0031308?1.055*Math.pow(e,1/2.4)-.055:e=12.92*e,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:n=12.92*n,i=i>.0031308?1.055*Math.pow(i,1/2.4)-.055:i=12.92*i,e=Math.min(Math.max(0,e),1),n=Math.min(Math.max(0,n),1),i=Math.min(Math.max(0,i),1),[255*e,255*n,255*i]}function L(t){var e,n,i,a=t[0],o=t[1],r=t[2];return a/=95.047,o/=100,r/=108.883,a=a>.008856?Math.pow(a,1/3):7.787*a+16/116,o=o>.008856?Math.pow(o,1/3):7.787*o+16/116,r=r>.008856?Math.pow(r,1/3):7.787*r+16/116,e=116*o-16,n=500*(a-o),i=200*(o-r),[e,n,i]}function R(t){return z(L(t))}function O(t){var e,n,i,a,o=t[0],r=t[1],s=t[2];return o<=8?(n=100*o/903.3,a=7.787*(n/100)+16/116):(n=100*Math.pow((o+16)/116,3),a=Math.pow(n/100,1/3)),e=e/95.047<=.008856?e=95.047*(r/500+a-16/116)/7.787:95.047*Math.pow(r/500+a,3),i=i/108.883<=.008859?i=108.883*(a-s/200-16/116)/7.787:108.883*Math.pow(a-s/200,3),[e,n,i]}function z(t){var e,n,i,a=t[0],o=t[1],r=t[2];return e=Math.atan2(r,o),n=360*e/2/Math.PI,n<0&&(n+=360),i=Math.sqrt(o*o+r*r),[a,i,n]}function B(t){return F(O(t))}function N(t){var e,n,i,a=t[0],o=t[1],r=t[2];return i=r/360*2*Math.PI,e=o*Math.cos(i),n=o*Math.sin(i),[a,e,n]}function W(t){return O(N(t))}function V(t){return B(N(t))}function E(t){return an[t]}function H(t){return e(E(t))}function j(t){return n(E(t))}function q(t){return i(E(t))}function Y(t){return a(E(t))}function U(t){return l(E(t))}function X(t){return s(E(t))}function K(t){if(t){var e=/^#([a-fA-F0-9]{3,4})$/i,n=/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,i=/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,a=/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,o=/(\w+)/,r=[0,0,0],s=1,l=t.match(e),d="";if(l){l=l[1],d=l[3];for(var u=0;u<r.length;u++)r[u]=parseInt(l[u]+l[u],16);d&&(s=Math.round(parseInt(d+d,16)/255*100)/100)}else if(l=t.match(n)){d=l[2],l=l[1];for(var u=0;u<r.length;u++)r[u]=parseInt(l.slice(2*u,2*u+2),16);d&&(s=Math.round(parseInt(d,16)/255*100)/100)}else if(l=t.match(i)){for(var u=0;u<r.length;u++)r[u]=parseInt(l[u+1]);s=parseFloat(l[4])}else if(l=t.match(a)){for(var u=0;u<r.length;u++)r[u]=Math.round(2.55*parseFloat(l[u+1]));s=parseFloat(l[4])}else if(l=t.match(o)){if("transparent"==l[1])return[0,0,0,0];if(r=gn[l[1]],!r)return}for(var u=0;u<r.length;u++)r[u]=dt(r[u],0,255);return s=s||0==s?dt(s,0,1):1,r[3]=s,r}}function G(t){if(t){var e=/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/,n=t.match(e);if(n){var i=parseFloat(n[4]),a=dt(parseInt(n[1]),0,360),o=dt(parseFloat(n[2]),0,100),r=dt(parseFloat(n[3]),0,100),s=dt(isNaN(i)?1:i,0,1);return[a,o,r,s]}}}function Z(t){if(t){var e=/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/,n=t.match(e);if(n){var i=parseFloat(n[4]),a=dt(parseInt(n[1]),0,360),o=dt(parseFloat(n[2]),0,100),r=dt(parseFloat(n[3]),0,100),s=dt(isNaN(i)?1:i,0,1);return[a,o,r,s]}}}function $(t){var e=K(t);return e&&e.slice(0,3)}function J(t){var e=G(t);return e&&e.slice(0,3)}function Q(t){var e=K(t);return e?e[3]:(e=G(t))?e[3]:(e=Z(t))?e[3]:void 0}function tt(t,e){var e=void 0!==e&&3===t.length?e:t[3];return"#"+ut(t[0])+ut(t[1])+ut(t[2])+(e>=0&&e<1?ut(Math.round(255*e)):"")}function et(t,e){return e<1||t[3]&&t[3]<1?nt(t,e):"rgb("+t[0]+", "+t[1]+", "+t[2]+")"}function nt(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"rgba("+t[0]+", "+t[1]+", "+t[2]+", "+e+")"}function it(t,e){if(e<1||t[3]&&t[3]<1)return at(t,e);var n=Math.round(t[0]/255*100),i=Math.round(t[1]/255*100),a=Math.round(t[2]/255*100);return"rgb("+n+"%, "+i+"%, "+a+"%)"}function at(t,e){var n=Math.round(t[0]/255*100),i=Math.round(t[1]/255*100),a=Math.round(t[2]/255*100);return"rgba("+n+"%, "+i+"%, "+a+"%, "+(e||t[3]||1)+")"}function ot(t,e){return e<1||t[3]&&t[3]<1?rt(t,e):"hsl("+t[0]+", "+t[1]+"%, "+t[2]+"%)"}function rt(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"hsla("+t[0]+", "+t[1]+"%, "+t[2]+"%, "+e+")"}function st(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"hwb("+t[0]+", "+t[1]+"%, "+t[2]+"%"+(void 0!==e&&1!==e?", "+e:"")+")"}function lt(t){return mn[t.slice(0,3)]}function dt(t,e,n){return Math.min(Math.max(e,t),n)}function ut(t){var e=t.toString(16).toUpperCase();return e.length<2?"0"+e:e}function ht(t){return!t||kn.isNullOrUndef(t.size)||kn.isNullOrUndef(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}function ct(t,e,n,i){var a,o,r,s,l,d,u,h,c,f=Object.keys(n);for(a=0,o=f.length;a<o;++a)if(r=f[a],d=n[r],e.hasOwnProperty(r)||(e[r]=d),s=e[r],s!==d&&"_"!==r[0]){if(t.hasOwnProperty(r)||(t[r]=s),l=t[r],u=typeof d,u===typeof l)if("string"===u){if(h=xn(l),h.valid&&(c=xn(d),c.valid)){e[r]=c.mix(h,i).rgbString();continue}}else if(zn.isFinite(l)&&zn.isFinite(d)){e[r]=l+(d-l)*i;continue}e[r]=d}}function ft(t,e){return t._chartjs?void t._chartjs.listeners.push(e):(Object.defineProperty(t,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[e]}}),void Un.forEach(function(e){var n="onData"+e.charAt(0).toUpperCase()+e.slice(1),i=t[e];Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value:function(){var e=Array.prototype.slice.call(arguments),a=i.apply(this,e);return zn.each(t._chartjs.listeners,function(t){"function"==typeof t[n]&&t[n].apply(t,e)}),a}})}))}function gt(t,e){var n=t._chartjs;if(n){var i=n.listeners,a=i.indexOf(e);a!==-1&&i.splice(a,1),i.length>0||(Un.forEach(function(e){delete t[e]}),delete t._chartjs)}}function pt(t){var e=this._view;return!!e&&Math.abs(t-e.x)<e.radius+e.hitRadius}function mt(t){var e=this._view;return!!e&&Math.abs(t-e.y)<e.radius+e.hitRadius}function vt(t){return t&&void 0!==t.width}function bt(t){var e,n,i,a,o;return vt(t)?(o=t.width/2,e=t.x-o,n=t.x+o,i=Math.min(t.y,t.base),a=Math.max(t.y,t.base)):(o=t.height/2,e=Math.min(t.x,t.base),n=Math.max(t.x,t.base),i=t.y-o,a=t.y+o),{left:e,top:i,right:n,bottom:a}}function xt(t,e,n){return t===e?n:t===n?e:t}function yt(t){var e=t.borderSkipped,n={};return e?(t.horizontal?t.base>t.x&&(e=xt(e,"left","right")):t.base<t.y&&(e=xt(e,"bottom","top")),n[e]=!0,n):n}function kt(t,e,n){var i,a,o,r,s=t.borderWidth,l=yt(t);return zn.isObject(s)?(i=+s.top||0,a=+s.right||0,o=+s.bottom||0,r=+s.left||0):i=a=o=r=+s||0,{t:l.top||i<0?0:i>n?n:i,r:l.right||a<0?0:a>e?e:a,b:l.bottom||o<0?0:o>n?n:o,l:l.left||r<0?0:r>e?e:r}}function wt(t){var e=bt(t),n=e.right-e.left,i=e.bottom-e.top,a=kt(t,n/2,i/2);return{outer:{x:e.left,y:e.top,w:n,h:i},inner:{x:e.left+a.l,y:e.top+a.t,w:n-a.l-a.r,h:i-a.t-a.b}}}function Mt(t,e,n){var i=null===e,a=null===n,o=!(!t||i&&a)&&bt(t);return o&&(i||e>=o.left&&e<=o.right)&&(a||n>=o.top&&n<=o.bottom)}function _t(t,e){var n,i,a,o,r=t.isHorizontal()?t.width:t.height,s=t.getTicks();for(a=1,o=e.length;a<o;++a)r=Math.min(r,Math.abs(e[a]-e[a-1]));for(a=0,o=s.length;a<o;++a)i=t.getPixelForTick(a),r=a>0?Math.min(r,i-n):r,n=i;return r}function Ct(t,e,n){var i,a,o=n.barThickness,r=e.stackCount,s=e.pixels[t];return zn.isNullOrUndef(o)?(i=e.min*n.categoryPercentage,a=n.barPercentage):(i=o*r,a=1),{chunk:i/r,ratio:a,start:s-i/2}}function St(t,e,n){var i,a,o=e.pixels,r=o[t],s=t>0?o[t-1]:null,l=t<o.length-1?o[t+1]:null,d=n.categoryPercentage;return null===s&&(s=r-(null===l?e.end-e.start:l-r)),null===l&&(l=r+r-s),i=r-(r-Math.min(s,l))/2*d,a=Math.abs(l-s)/2*d,{chunk:a/e.stackCount,ratio:n.barPercentage,start:i}}function Pt(t,e){return bi(t.showLine,e.showLines)}function It(t,e){return t["native"]?{x:t.x,y:t.y}:zn.getRelativePosition(t,e)}function At(t,e){var n,i,a,o,r,s=t.data.datasets;for(i=0,o=s.length;i<o;++i)if(t.isDatasetVisible(i))for(n=t.getDatasetMeta(i),a=0,r=n.data.length;a<r;++a){var l=n.data[a];l._view.skip||e(l)}}function Dt(t,e){var n=[];return At(t,function(t){t.inRange(e.x,e.y)&&n.push(t)}),n}function Tt(t,e,n,i){var a=Number.POSITIVE_INFINITY,o=[];return At(t,function(t){if(!n||t.inRange(e.x,e.y)){var r=t.getCenterPoint(),s=i(e,r);s<a?(o=[t],a=s):s===a&&o.push(t)}}),o}function Ft(t){var e=t.indexOf("x")!==-1,n=t.indexOf("y")!==-1;return function(t,i){var a=e?Math.abs(t.x-i.x):0,o=n?Math.abs(t.y-i.y):0;return Math.sqrt(Math.pow(a,2)+Math.pow(o,2))}}function Lt(t,e,n){var i=It(e,t);n.axis=n.axis||"x";var a=Ft(n.axis),o=n.intersect?Dt(t,i):Tt(t,i,!1,a),r=[];return o.length?(t.data.datasets.forEach(function(e,n){if(t.isDatasetVisible(n)){var i=t.getDatasetMeta(n),a=i.data[o[0]._index];a&&!a._view.skip&&r.push(a)}}),r):[]}function Rt(t,e){return zn.where(t,function(t){return t.position===e})}function Ot(t,e){t.forEach(function(t,e){return t._tmpIndex_=e,t}),t.sort(function(t,n){var i=e?n:t,a=e?t:n;return i.weight===a.weight?i._tmpIndex_-a._tmpIndex_:i.weight-a.weight}),t.forEach(function(t){delete t._tmpIndex_})}function zt(t){var e=0,n=0,i=0,a=0;return zn.each(t,function(t){if(t.getPadding){var o=t.getPadding();e=Math.max(e,o.top),n=Math.max(n,o.left),i=Math.max(i,o.bottom),a=Math.max(a,o.right)}}),{top:e,left:n,bottom:i,right:a}}function Bt(t,e){zn.each(t,function(t){e[t.position]+=t.isHorizontal()?t.height:t.width})}function Nt(t){return t&&t["default"]||t}function Wt(t,e){var n=zn.getStyle(t,e),i=n&&n.match(/^(\d+)(\.\d+)?px$/);return i?Number(i[1]):void 0}function Vt(t,e){var n=t.style,i=t.getAttribute("height"),a=t.getAttribute("width");if(t[zi]={initial:{height:i,width:a,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",null===a||""===a){var o=Wt(t,"width");void 0!==o&&(t.width=o)}if(null===i||""===i)if(""===t.style.height)t.height=t.width/(e.options.aspectRatio||2);else{var r=Wt(t,"height");void 0!==o&&(t.height=r)}return t}function Et(t,e,n){t.addEventListener(e,n,qi)}function Ht(t,e,n){t.removeEventListener(e,n,qi)}function jt(t,e,n,i,a){return{type:t,chart:e,"native":a||null,x:void 0!==n?n:null,y:void 0!==i?i:null}}function qt(t,e){var n=Hi[t.type]||t.type,i=zn.getRelativePosition(t,e);return jt(n,e,i.x,i.y,t)}function Yt(t,e){var n=!1,i=[];return function(){i=Array.prototype.slice.call(arguments),e=e||this,n||(n=!0,zn.requestAnimFrame.call(window,function(){n=!1,t.apply(e,i)}))}}function Ut(t){var e=document.createElement("div");return e.className=t||"",e}function Xt(t){var e=1e6,n=Ut(Ni),i=Ut(Ni+"-expand"),a=Ut(Ni+"-shrink");i.appendChild(Ut()),a.appendChild(Ut()),n.appendChild(i),n.appendChild(a),n._reset=function(){i.scrollLeft=e,i.scrollTop=e,a.scrollLeft=e,a.scrollTop=e};var o=function(){n._reset(),t()};return Et(i,"scroll",o.bind(i,"expand")),Et(a,"scroll",o.bind(a,"shrink")),n}function Kt(t,e){var n=t[zi]||(t[zi]={}),i=n.renderProxy=function(t){t.animationName===Vi&&e()};zn.each(Ei,function(e){Et(t,e,i)}),n.reflow=!!t.offsetParent,t.classList.add(Wi)}function Gt(t){var e=t[zi]||{},n=e.renderProxy;n&&(zn.each(Ei,function(e){Ht(t,e,n)}),delete e.renderProxy),t.classList.remove(Wi)}function Zt(t,e,n){var i=t[zi]||(t[zi]={}),a=i.resizer=Xt(Yt(function(){if(i.resizer){var a=n.options.maintainAspectRatio&&t.parentNode,o=a?a.clientWidth:0;e(jt("resize",n)),a&&a.clientWidth<o&&n.canvas&&e(jt("resize",n))}}));Kt(t,function(){if(i.resizer){var e=t.parentNode;e&&e!==a.parentNode&&e.insertBefore(a,e.firstChild),a._reset()}})}function $t(t){var e=t[zi]||{},n=e.resizer;delete e.resizer,Gt(t),n&&n.parentNode&&n.parentNode.removeChild(n)}function Jt(t,e){var n=t._style||document.createElement("style");t._style||(t._style=n,e="/* Chart.js */\n"+e,n.setAttribute("type","text/css"),document.getElementsByTagName("head")[0].appendChild(n)),n.appendChild(document.createTextNode(e))}function Qt(t,e){return e&&(zn.isArray(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function te(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function ee(t){var e=t._xScale,n=t._yScale||t._scale,i=t._index,a=t._datasetIndex,o=t._chart.getDatasetMeta(a).controller,r=o._getIndexScale(),s=o._getValueScale();return{xLabel:e?e.getLabelForIndex(i,a):"",yLabel:n?n.getLabelForIndex(i,a):"",label:r?""+r.getLabelForIndex(i,a):"",value:s?""+s.getLabelForIndex(i,a):"",index:i,datasetIndex:a,x:t._model.x,y:t._model.y}}function ne(t){var e=Ln.global;return{xPadding:t.xPadding,yPadding:t.yPadding,xAlign:t.xAlign,yAlign:t.yAlign,bodyFontColor:t.bodyFontColor,_bodyFontFamily:Zi(t.bodyFontFamily,e.defaultFontFamily),_bodyFontStyle:Zi(t.bodyFontStyle,e.defaultFontStyle),_bodyAlign:t.bodyAlign,bodyFontSize:Zi(t.bodyFontSize,e.defaultFontSize),bodySpacing:t.bodySpacing,titleFontColor:t.titleFontColor,_titleFontFamily:Zi(t.titleFontFamily,e.defaultFontFamily),_titleFontStyle:Zi(t.titleFontStyle,e.defaultFontStyle),titleFontSize:Zi(t.titleFontSize,e.defaultFontSize),_titleAlign:t.titleAlign,titleSpacing:t.titleSpacing,titleMarginBottom:t.titleMarginBottom,footerFontColor:t.footerFontColor,_footerFontFamily:Zi(t.footerFontFamily,e.defaultFontFamily),_footerFontStyle:Zi(t.footerFontStyle,e.defaultFontStyle),footerFontSize:Zi(t.footerFontSize,e.defaultFontSize),_footerAlign:t.footerAlign,footerSpacing:t.footerSpacing,footerMarginTop:t.footerMarginTop,caretSize:t.caretSize,cornerRadius:t.cornerRadius,backgroundColor:t.backgroundColor,opacity:0,legendColorBackground:t.multiKeyBackground,displayColors:t.displayColors,borderColor:t.borderColor,borderWidth:t.borderWidth}}function ie(t,e){var n=t._chart.ctx,i=2*e.yPadding,a=0,o=e.body,r=o.reduce(function(t,e){return t+e.before.length+e.lines.length+e.after.length},0);r+=e.beforeBody.length+e.afterBody.length;var s=e.title.length,l=e.footer.length,d=e.titleFontSize,u=e.bodyFontSize,h=e.footerFontSize;i+=s*d,i+=s?(s-1)*e.titleSpacing:0,i+=s?e.titleMarginBottom:0,i+=r*u,i+=r?(r-1)*e.bodySpacing:0,i+=l?e.footerMarginTop:0,i+=l*h,i+=l?(l-1)*e.footerSpacing:0;var c=0,f=function(t){a=Math.max(a,n.measureText(t).width+c)};return n.font=zn.fontString(d,e._titleFontStyle,e._titleFontFamily),zn.each(e.title,f),n.font=zn.fontString(u,e._bodyFontStyle,e._bodyFontFamily),zn.each(e.beforeBody.concat(e.afterBody),f),c=e.displayColors?u+2:0,zn.each(o,function(t){zn.each(t.before,f),zn.each(t.lines,f),zn.each(t.after,f)}),c=0,n.font=zn.fontString(h,e._footerFontStyle,e._footerFontFamily),zn.each(e.footer,f),a+=2*e.xPadding,{width:a,height:i}}function ae(t,e){var n=t._model,i=t._chart,a=t._chart.chartArea,o="center",r="center";n.y<e.height?r="top":n.y>i.height-e.height&&(r="bottom");var s,l,d,u,h,c=(a.left+a.right)/2,f=(a.top+a.bottom)/2;"center"===r?(s=function(t){return t<=c},l=function(t){return t>c}):(s=function(t){return t<=e.width/2},l=function(t){return t>=i.width-e.width/2}),d=function(t){return t+e.width+n.caretSize+n.caretPadding>i.width},u=function(t){return t-e.width-n.caretSize-n.caretPadding<0},h=function(t){return t<=f?"top":"bottom"},s(n.x)?(o="left",d(n.x)&&(o="center",r=h(n.y))):l(n.x)&&(o="right",u(n.x)&&(o="center",r=h(n.y)));var g=t._options;return{xAlign:g.xAlign?g.xAlign:o,yAlign:g.yAlign?g.yAlign:r}}function oe(t,e,n,i){var a=t.x,o=t.y,r=t.caretSize,s=t.caretPadding,l=t.cornerRadius,d=n.xAlign,u=n.yAlign,h=r+s,c=l+s;return"right"===d?a-=e.width:"center"===d&&(a-=e.width/2,a+e.width>i.width&&(a=i.width-e.width),a<0&&(a=0)),"top"===u?o+=h:o-="bottom"===u?e.height+h:e.height/2,"center"===u?"left"===d?a+=h:"right"===d&&(a-=h):"left"===d?a-=c:"right"===d&&(a+=c),{x:a,y:o}}function re(t,e){return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-t.xPadding:t.x+t.xPadding}function se(t){return Qt([],te(t))}function le(){return zn.merge({},[].slice.call(arguments),{merger:function(t,e,n,i){if("xAxes"===t||"yAxes"===t){var a,o,r,s=n[t].length;for(e[t]||(e[t]=[]),a=0;a<s;++a)r=n[t][a],o=ea(r.type,"xAxes"===t?"category":"linear"),a>=e[t].length&&e[t].push({}),!e[t][a].type||r.type&&r.type!==e[t][a].type?zn.merge(e[t][a],[Gi.getScaleDefaults(o),r]):zn.merge(e[t][a],r)}else zn._merger(t,e,n,i)}})}function de(){return zn.merge({},[].slice.call(arguments),{merger:function(t,e,n,i){var a=e[t]||{},o=n[t];"scales"===t?e[t]=le(a,o):"scale"===t?e[t]=zn.merge(a,[Gi.getScaleDefaults(o.type),o]):zn._merger(t,e,n,i)}})}function ue(t){t=t||{};var e=t.data=t.data||{};return e.datasets=e.datasets||[],e.labels=e.labels||[],t.options=de(Ln.global,Ln[t.type],t.options||{}),t}function he(t){var e=t.options;zn.each(t.scales,function(e){Ti.removeBox(t,e)}),e=de(Ln.global,Ln[t.config.type],e),t.options=t.config.options=e,t.ensureScalesHaveIDs(),t.buildOrUpdateScales(),t.tooltip._options=e.tooltips,t.tooltip.initialize()}function ce(t){return"top"===t||"bottom"===t}function fe(){throw new Error("This method is not implemented: either no adapter can be found or an incomplete integration was provided.")}function ge(t){this.options=t||{}}function pe(t){var e,n,i=[];for(e=0,n=t.length;e<n;++e)i.push(t[e].label);return i}function me(t,e,n){var i=t.getPixelForTick(e);return n&&(i-=1===t.getTicks().length?t.isHorizontal()?Math.max(i-t.left,t.right-i):Math.max(i-t.top,t.bottom-i):0===e?(t.getPixelForTick(1)-i)/2:(i-t.getPixelForTick(e-1))/2),i}function ve(t,e,n){return zn.isArray(e)?zn.longestText(t,n,e):t.measureText(e).width}function be(t,e){var n,i,a,o,r=[],s=1e-14,l=t.stepSize,d=l||1,u=t.maxTicks-1,h=t.min,c=t.max,f=t.precision,g=e.min,p=e.max,m=zn.niceNum((p-g)/u/d)*d;if(m<s&&pa(h)&&pa(c))return[g,p];o=Math.ceil(p/m)-Math.floor(g/m),o>u&&(m=zn.niceNum(o*m/u/d)*d),l||pa(f)?n=Math.pow(10,zn._decimalPlaces(m)):(n=Math.pow(10,f),m=Math.ceil(m*n)/n),i=Math.floor(g/m)*m,a=Math.ceil(p/m)*m,l&&(!pa(h)&&zn.almostWhole(h/m,m/1e3)&&(i=h),!pa(c)&&zn.almostWhole(c/m,m/1e3)&&(a=c)),o=(a-i)/m,o=zn.almostEquals(o,Math.round(o),m/1e3)?Math.round(o):Math.ceil(o),i=Math.round(i*n)/n,a=Math.round(a*n)/n,r.push(pa(h)?i:h);for(var v=1;v<o;++v)r.push(Math.round((i+v*m)*n)/n);return r.push(pa(c)?a:c),r}function xe(t,e){var n,i,a=[],o=ya(t.min,Math.pow(10,Math.floor(zn.log10(e.min)))),r=Math.floor(zn.log10(e.max)),s=Math.ceil(e.max/Math.pow(10,r));0===o?(n=Math.floor(zn.log10(e.minNotZero)),i=Math.floor(e.minNotZero/Math.pow(10,n)),a.push(o),o=i*Math.pow(10,n)):(n=Math.floor(zn.log10(o)),i=Math.floor(o/Math.pow(10,n)));var l=n<0?Math.pow(10,Math.abs(n)):1;do a.push(o),++i,10===i&&(i=1,++n,l=n>=0?1:l),o=Math.round(i*Math.pow(10,n)*l)/l;while(n<r||n===r&&i<s);var d=ya(t.max,o);return a.push(d),a}function ye(t,e){return zn.isFinite(t)&&t>=0?t:e}function ke(t){var e=t.options;return e.angleLines.display||e.pointLabels.display?t.chart.data.labels.length:0}function we(t){var e=t.ticks;return e.display&&t.display?_a(e.fontSize,Ln.global.defaultFontSize)+2*e.backdropPaddingY:0}function Me(t,e,n){return zn.isArray(n)?{w:zn.longestText(t,t.font,n),h:n.length*e}:{w:t.measureText(n).width,h:e}}function _e(t,e,n,i,a){return t===i||t===a?{start:e-n/2,end:e+n/2}:t<i||t>a?{start:e-n,end:e}:{start:e,end:e+n}}function Ce(t){var e,n,i,a=zn.options._parseFont(t.options.pointLabels),o={l:0,r:t.width,t:0,b:t.height-t.paddingTop},r={};t.ctx.font=a.string,t._pointLabelSizes=[];var s=ke(t);for(e=0;e<s;e++){i=t.getPointPosition(e,t.drawingArea+5),n=Me(t.ctx,a.lineHeight,t.pointLabels[e]||""),t._pointLabelSizes[e]=n;var l=t.getIndexAngle(e),d=zn.toDegrees(l)%360,u=_e(d,i.x,n.w,0,180),h=_e(d,i.y,n.h,90,270);u.start<o.l&&(o.l=u.start,r.l=l),u.end>o.r&&(o.r=u.end,r.r=l),h.start<o.t&&(o.t=h.start,r.t=l),h.end>o.b&&(o.b=h.end,r.b=l)}t.setReductions(t.drawingArea,o,r)}function Se(t){return 0===t||180===t?"center":t<180?"left":"right"}function Pe(t,e,n,i){var a,o,r=n.y+i/2;if(zn.isArray(e))for(a=0,o=e.length;a<o;++a)t.fillText(e[a],n.x,r),r+=i;else t.fillText(e,n.x,r)}function Ie(t,e,n){90===t||270===t?n.y-=e.h/2:(t>270||t<90)&&(n.y-=e.h)}function Ae(t){var e=t.ctx,n=t.options,i=n.angleLines,a=n.gridLines,o=n.pointLabels,r=_a(i.lineWidth,a.lineWidth),s=_a(i.color,a.color),l=we(n);e.save(),e.lineWidth=r,e.strokeStyle=s,e.setLineDash&&(e.setLineDash(Sa([i.borderDash,a.borderDash,[]])),e.lineDashOffset=Sa([i.borderDashOffset,a.borderDashOffset,0]));var d=t.getDistanceFromCenterForValue(n.ticks.reverse?t.min:t.max),u=zn.options._parseFont(o);e.font=u.string,e.textBaseline="middle";for(var h=ke(t)-1;h>=0;h--){if(i.display&&r&&s){var c=t.getPointPosition(h,d);e.beginPath(),e.moveTo(t.xCenter,t.yCenter),e.lineTo(c.x,c.y),e.stroke()}if(o.display){var f=0===h?l/2:0,g=t.getPointPosition(h,d+f+5),p=Ca(o.fontColor,h,Ln.global.defaultFontColor);e.fillStyle=p;var m=t.getIndexAngle(h),v=zn.toDegrees(m);e.textAlign=Se(v),Ie(v,t._pointLabelSizes[h],g),Pe(e,t.pointLabels[h]||"",g,u.lineHeight)}}e.restore()}function De(t,e,n,i){var a,o=t.ctx,r=e.circular,s=ke(t),l=Ca(e.color,i-1),d=Ca(e.lineWidth,i-1);if((r||s)&&l&&d){if(o.save(),o.strokeStyle=l,o.lineWidth=d,o.setLineDash&&(o.setLineDash(e.borderDash||[]),o.lineDashOffset=e.borderDashOffset||0),o.beginPath(),r)o.arc(t.xCenter,t.yCenter,n,0,2*Math.PI);else{a=t.getPointPosition(0,n),o.moveTo(a.x,a.y);for(var u=1;u<s;u++)a=t.getPointPosition(u,n),o.lineTo(a.x,a.y)}o.closePath(),o.stroke(),o.restore()}}function Te(t){return zn.isNumber(t)?t:0}function Fe(t,e){return t-e}function Le(t){var e,n,i,a={},o=[];for(e=0,n=t.length;e<n;++e)i=t[e],a[i]||(a[i]=!0,o.push(i));return o}function Re(t,e,n,i){if("linear"===i||!t.length)return[{time:e,pos:0},{time:n,pos:1}];var a,o,r,s,l,d=[],u=[e];for(a=0,o=t.length;a<o;++a)s=t[a],s>e&&s<n&&u.push(s);for(u.push(n),a=0,o=u.length;a<o;++a)l=u[a+1],r=u[a-1],s=u[a],void 0!==r&&void 0!==l&&Math.round((l+r)/2)===s||d.push({time:s,pos:a/(o-1)});return d}function Oe(t,e,n){for(var i,a,o,r=0,s=t.length-1;r>=0&&r<=s;){if(i=r+s>>1,a=t[i-1]||null,o=t[i],!a)return{lo:null,hi:o};if(o[e]<n)r=i+1;else{if(!(a[e]>n))return{lo:a,hi:o};s=i-1}}return{lo:o,hi:null}}function ze(t,e,n,i){var a=Oe(t,e,n),o=a.lo?a.hi?a.lo:t[t.length-2]:t[0],r=a.lo?a.hi?a.hi:t[t.length-1]:t[1],s=r[e]-o[e],l=s?(n-o[e])/s:0,d=(r[i]-o[i])*l;return o[i]+d}function Be(t,e){var n=t._adapter,i=t.options.time,a=i.parser,o=a||i.format,r=e;return"function"==typeof a&&(r=a(r)),zn.isFinite(r)||(r="string"==typeof o?n.parse(r,o):n.parse(r)),null!==r?+r:(a||"function"!=typeof o||(r=o(e),zn.isFinite(r)||(r=n.parse(r))),r)}function Ne(t,e){if(zn.isNullOrUndef(e))return null;var n=t.options.time,i=Be(t,t.getRightValue(e));return null===i?i:(n.round&&(i=+t._adapter.startOf(i,n.round)),i)}function We(t,e,n,i){var a,o,r,s=e-t,l=La[n],d=l.size,u=l.steps;if(!u)return Math.ceil(s/(i*d));for(a=0,o=u.length;a<o&&(r=u[a],!(Math.ceil(s/(d*r))<=i));++a);return r}function Ve(t,e,n,i){var a,o,r,s=Ra.length;for(a=Ra.indexOf(t);a<s-1;++a)if(o=La[Ra[a]],r=o.steps?o.steps[o.steps.length-1]:Fa,o.common&&Math.ceil((n-e)/(r*o.size))<=i)return Ra[a];return Ra[s-1]}function Ee(t,e,n,i,a){var o,r,s=Ra.length;for(o=s-1;o>=Ra.indexOf(n);o--)if(r=Ra[o],La[r].common&&t._adapter.diff(a,i,r)>=e.length)return r;return Ra[n?Ra.indexOf(n):0]}function He(t){for(var e=Ra.indexOf(t)+1,n=Ra.length;e<n;++e)if(La[Ra[e]].common)return Ra[e]}function je(t,e,n,i){var a,o=t._adapter,r=t.options,s=r.time,l=s.unit||Ve(s.minUnit,e,n,i),d=He(l),u=Da(s.stepSize,s.unitStepSize),h="week"===l&&s.isoWeekday,c=r.ticks.major.enabled,f=La[l],g=e,p=n,m=[];for(u||(u=We(e,n,l,i)),h&&(g=+o.startOf(g,"isoWeek",h),p=+o.startOf(p,"isoWeek",h)),g=+o.startOf(g,h?"day":l),p=+o.startOf(p,h?"day":l),p<n&&(p=+o.add(p,1,l)),a=g,c&&d&&!h&&!s.round&&(a=+o.startOf(a,d),a=+o.add(a,~~((g-a)/(f.size*u))*u,l));a<p;a=+o.add(a,u,l))m.push(+a);return m.push(+a),m}function qe(t,e,n,i,a){var o,r,s=0,l=0;return a.offset&&e.length&&(a.time.min||(o=ze(t,"time",e[0],"pos"),s=1===e.length?1-o:(ze(t,"time",e[1],"pos")-o)/2),a.time.max||(r=ze(t,"time",e[e.length-1],"pos"),l=1===e.length?r:(r-ze(t,"time",e[e.length-2],"pos"))/2)),{start:s,end:l}}function Ye(t,e,n){var i,a,o,r,s=[];for(i=0,a=e.length;i<a;++i)o=e[i],r=!!n&&o===+t._adapter.startOf(o,n),s.push({value:o,major:r});return s}function Ue(t,e,n){var i,a=t._model||{},o=a.fill;if(void 0===o&&(o=!!a.backgroundColor),o===!1||null===o)return!1;if(o===!0)return"origin";if(i=parseFloat(o,10),isFinite(i)&&Math.floor(i)===i)return"-"!==o[0]&&"+"!==o[0]||(i=e+i),!(i===e||i<0||i>=n)&&i;switch(o){case"bottom":return"start";case"top":return"end";case"zero":return"origin";case"origin":case"start":case"end":return o;default:return!1}}function Xe(t){var e,n=t.el._model||{},i=t.el._scale||{},a=t.fill,o=null;if(isFinite(a))return null;if("start"===a?o=void 0===n.scaleBottom?i.bottom:n.scaleBottom:"end"===a?o=void 0===n.scaleTop?i.top:n.scaleTop:void 0!==n.scaleZero?o=n.scaleZero:i.getBasePosition?o=i.getBasePosition():i.getBasePixel&&(o=i.getBasePixel()),void 0!==o&&null!==o){if(void 0!==o.x&&void 0!==o.y)return o;if(zn.isFinite(o))return e=i.isHorizontal(),{x:e?o:null,y:e?null:o}}return null}function Ke(t,e,n){var i,a=t[e],o=a.fill,r=[e];if(!n)return o;for(;o!==!1&&r.indexOf(o)===-1;){if(!isFinite(o))return o;if(i=t[o],!i)return!1;if(i.visible)return o;r.push(o),o=i.fill}return!1}function Ge(t){var e=t.fill,n="dataset";return e===!1?null:(isFinite(e)||(n="boundary"),Va[n](t))}function Ze(t){return t&&!t.skip}function $e(t,e,n,i,a){var o;if(i&&a){for(t.moveTo(e[0].x,e[0].y),o=1;o<i;++o)zn.canvas.lineTo(t,e[o-1],e[o]);for(t.lineTo(n[a-1].x,n[a-1].y),o=a-1;o>0;--o)zn.canvas.lineTo(t,n[o],n[o-1],!0)}}function Je(t,e,n,i,a,o){var r,s,l,d,u,h,c,f=e.length,g=i.spanGaps,p=[],m=[],v=0,b=0;for(t.beginPath(),r=0,s=f+!!o;r<s;++r)l=r%f,d=e[l]._view,u=n(d,l,i),h=Ze(d),c=Ze(u),h&&c?(v=p.push(d),b=m.push(u)):v&&b&&(g?(h&&p.push(d),c&&m.push(u)):($e(t,p,m,v,b),v=b=0,p=[],m=[]));$e(t,p,m,v,b),t.closePath(),t.fillStyle=a,t.fill()}function Qe(t,e){return t.usePointStyle&&t.boxWidth>e?e:t.boxWidth}function tn(t,e){var n=new qa({ctx:t.ctx,options:e,chart:t});Ti.configure(t,n,e),Ti.addBox(t,n),t.legend=n}function en(t,e){var n=new Xa({ctx:t.ctx,options:e,chart:t});Ti.configure(t,n,e),Ti.addBox(t,n),t.titleBlock=n}t=t&&t.hasOwnProperty("default")?t["default"]:t;var nn={rgb2hsl:e,rgb2hsv:n,rgb2hwb:i,rgb2cmyk:a,rgb2keyword:o,rgb2xyz:s,rgb2lab:l,rgb2lch:d,hsl2rgb:u,hsl2hsv:h,hsl2hwb:c,hsl2cmyk:f,hsl2keyword:p,hsv2rgb:m,hsv2hsl:v,hsv2hwb:x,hsv2cmyk:y,hsv2keyword:k,hwb2rgb:w,hwb2hsl:M,hwb2hsv:_,hwb2cmyk:C,hwb2keyword:S,cmyk2rgb:P,cmyk2hsl:I,cmyk2hsv:A,cmyk2hwb:D,cmyk2keyword:T,keyword2rgb:E,keyword2hsl:H,keyword2hsv:j,keyword2hwb:q,keyword2cmyk:Y,keyword2lab:U,keyword2xyz:X,xyz2rgb:F,xyz2lab:L,xyz2lch:R,lab2xyz:O,lab2rgb:B,lab2lch:z,lch2lab:N,lch2xyz:W,lch2rgb:V},an={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],
mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},on={};for(var rn in an)on[JSON.stringify(an[rn])]=rn;var sn=function(){return new cn};for(var ln in nn){sn[ln+"Raw"]=function(t){return function(e){return"number"==typeof e&&(e=Array.prototype.slice.call(arguments)),nn[t](e)}}(ln);var dn=/(\w+)2(\w+)/.exec(ln),un=dn[1],hn=dn[2];sn[un]=sn[un]||{},sn[un][hn]=sn[ln]=function(t){return function(e){"number"==typeof e&&(e=Array.prototype.slice.call(arguments));var n=nn[t](e);if("string"==typeof n||void 0===n)return n;for(var i=0;i<n.length;i++)n[i]=Math.round(n[i]);return n}}(ln)}var cn=function(){this.convs={}};cn.prototype.routeSpace=function(t,e){var n=e[0];return void 0===n?this.getValues(t):("number"==typeof n&&(n=Array.prototype.slice.call(e)),this.setValues(t,n))},cn.prototype.setValues=function(t,e){return this.space=t,this.convs={},this.convs[t]=e,this},cn.prototype.getValues=function(t){var e=this.convs[t];if(!e){var n=this.space,i=this.convs[n];e=sn[n][t](i),this.convs[t]=e}return e},["rgb","hsl","hsv","cmyk","keyword"].forEach(function(t){cn.prototype[t]=function(e){return this.routeSpace(t,arguments)}});var fn=sn,gn={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},pn={getRgba:K,getHsla:G,getRgb:$,getHsl:J,getHwb:Z,getAlpha:Q,hexString:tt,rgbString:et,rgbaString:nt,percentString:it,percentaString:at,hslString:ot,hslaString:rt,hwbString:st,keyword:lt},mn={};for(var vn in gn)mn[gn[vn]]=vn;var bn=function(t){if(t instanceof bn)return t;if(!(this instanceof bn))return new bn(t);this.valid=!1,this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1};var e;"string"==typeof t?(e=pn.getRgba(t),e?this.setValues("rgb",e):(e=pn.getHsla(t))?this.setValues("hsl",e):(e=pn.getHwb(t))&&this.setValues("hwb",e)):"object"==typeof t&&(e=t,void 0!==e.r||void 0!==e.red?this.setValues("rgb",e):void 0!==e.l||void 0!==e.lightness?this.setValues("hsl",e):void 0!==e.v||void 0!==e.value?this.setValues("hsv",e):void 0!==e.w||void 0!==e.whiteness?this.setValues("hwb",e):void 0===e.c&&void 0===e.cyan||this.setValues("cmyk",e))};bn.prototype={isValid:function(){return this.valid},rgb:function(){return this.setSpace("rgb",arguments)},hsl:function(){return this.setSpace("hsl",arguments)},hsv:function(){return this.setSpace("hsv",arguments)},hwb:function(){return this.setSpace("hwb",arguments)},cmyk:function(){return this.setSpace("cmyk",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){var t=this.values;return 1!==t.alpha?t.hwb.concat([t.alpha]):t.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var t=this.values;return t.rgb.concat([t.alpha])},hslaArray:function(){var t=this.values;return t.hsl.concat([t.alpha])},alpha:function(t){return void 0===t?this.values.alpha:(this.setValues("alpha",t),this)},red:function(t){return this.setChannel("rgb",0,t)},green:function(t){return this.setChannel("rgb",1,t)},blue:function(t){return this.setChannel("rgb",2,t)},hue:function(t){return t&&(t%=360,t=t<0?360+t:t),this.setChannel("hsl",0,t)},saturation:function(t){return this.setChannel("hsl",1,t)},lightness:function(t){return this.setChannel("hsl",2,t)},saturationv:function(t){return this.setChannel("hsv",1,t)},whiteness:function(t){return this.setChannel("hwb",1,t)},blackness:function(t){return this.setChannel("hwb",2,t)},value:function(t){return this.setChannel("hsv",2,t)},cyan:function(t){return this.setChannel("cmyk",0,t)},magenta:function(t){return this.setChannel("cmyk",1,t)},yellow:function(t){return this.setChannel("cmyk",2,t)},black:function(t){return this.setChannel("cmyk",3,t)},hexString:function(){return pn.hexString(this.values.rgb)},rgbString:function(){return pn.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return pn.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return pn.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return pn.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return pn.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return pn.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return pn.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){var t=this.values.rgb;return t[0]<<16|t[1]<<8|t[2]},luminosity:function(){for(var t=this.values.rgb,e=[],n=0;n<t.length;n++){var i=t[n]/255;e[n]=i<=.03928?i/12.92:Math.pow((i+.055)/1.055,2.4)}return.2126*e[0]+.7152*e[1]+.0722*e[2]},contrast:function(t){var e=this.luminosity(),n=t.luminosity();return e>n?(e+.05)/(n+.05):(n+.05)/(e+.05)},level:function(t){var e=this.contrast(t);return e>=7.1?"AAA":e>=4.5?"AA":""},dark:function(){var t=this.values.rgb,e=(299*t[0]+587*t[1]+114*t[2])/1e3;return e<128},light:function(){return!this.dark()},negate:function(){for(var t=[],e=0;e<3;e++)t[e]=255-this.values.rgb[e];return this.setValues("rgb",t),this},lighten:function(t){var e=this.values.hsl;return e[2]+=e[2]*t,this.setValues("hsl",e),this},darken:function(t){var e=this.values.hsl;return e[2]-=e[2]*t,this.setValues("hsl",e),this},saturate:function(t){var e=this.values.hsl;return e[1]+=e[1]*t,this.setValues("hsl",e),this},desaturate:function(t){var e=this.values.hsl;return e[1]-=e[1]*t,this.setValues("hsl",e),this},whiten:function(t){var e=this.values.hwb;return e[1]+=e[1]*t,this.setValues("hwb",e),this},blacken:function(t){var e=this.values.hwb;return e[2]+=e[2]*t,this.setValues("hwb",e),this},greyscale:function(){var t=this.values.rgb,e=.3*t[0]+.59*t[1]+.11*t[2];return this.setValues("rgb",[e,e,e]),this},clearer:function(t){var e=this.values.alpha;return this.setValues("alpha",e-e*t),this},opaquer:function(t){var e=this.values.alpha;return this.setValues("alpha",e+e*t),this},rotate:function(t){var e=this.values.hsl,n=(e[0]+t)%360;return e[0]=n<0?360+n:n,this.setValues("hsl",e),this},mix:function(t,e){var n=this,i=t,a=void 0===e?.5:e,o=2*a-1,r=n.alpha()-i.alpha(),s=((o*r===-1?o:(o+r)/(1+o*r))+1)/2,l=1-s;return this.rgb(s*n.red()+l*i.red(),s*n.green()+l*i.green(),s*n.blue()+l*i.blue()).alpha(n.alpha()*a+i.alpha()*(1-a))},toJSON:function(){return this.rgb()},clone:function(){var t,e,n=new bn,i=this.values,a=n.values;for(var o in i)i.hasOwnProperty(o)&&(t=i[o],e={}.toString.call(t),"[object Array]"===e?a[o]=t.slice(0):"[object Number]"===e?a[o]=t:console.error("unexpected color value:",t));return n}},bn.prototype.spaces={rgb:["red","green","blue"],hsl:["hue","saturation","lightness"],hsv:["hue","saturation","value"],hwb:["hue","whiteness","blackness"],cmyk:["cyan","magenta","yellow","black"]},bn.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},bn.prototype.getValues=function(t){for(var e=this.values,n={},i=0;i<t.length;i++)n[t.charAt(i)]=e[t][i];return 1!==e.alpha&&(n.a=e.alpha),n},bn.prototype.setValues=function(t,e){var n,i=this.values,a=this.spaces,o=this.maxes,r=1;if(this.valid=!0,"alpha"===t)r=e;else if(e.length)i[t]=e.slice(0,t.length),r=e[t.length];else if(void 0!==e[t.charAt(0)]){for(n=0;n<t.length;n++)i[t][n]=e[t.charAt(n)];r=e.a}else if(void 0!==e[a[t][0]]){var s=a[t];for(n=0;n<t.length;n++)i[t][n]=e[s[n]];r=e.alpha}if(i.alpha=Math.max(0,Math.min(1,void 0===r?i.alpha:r)),"alpha"===t)return!1;var l;for(n=0;n<t.length;n++)l=Math.max(0,Math.min(o[t][n],i[t][n])),i[t][n]=Math.round(l);for(var d in a)d!==t&&(i[d]=fn[t][d](i[t]));return!0},bn.prototype.setSpace=function(t,e){var n=e[0];return void 0===n?this.getValues(t):("number"==typeof n&&(n=Array.prototype.slice.call(e)),this.setValues(t,n),this)},bn.prototype.setChannel=function(t,e,n){var i=this.values[t];return void 0===n?i[e]:n===i[e]?this:(i[e]=n,this.setValues(t,i),this)},"undefined"!=typeof window&&(window.Color=bn);var xn=bn,yn={noop:function(){},uid:function(){var t=0;return function(){return t++}}(),isNullOrUndef:function(t){return null===t||"undefined"==typeof t},isArray:function(t){if(Array.isArray&&Array.isArray(t))return!0;var e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)},isObject:function(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)},isFinite:function(t){return("number"==typeof t||t instanceof Number)&&isFinite(t)},valueOrDefault:function(t,e){return"undefined"==typeof t?e:t},valueAtIndexOrDefault:function(t,e,n){return yn.valueOrDefault(yn.isArray(t)?t[e]:t,n)},callback:function(t,e,n){if(t&&"function"==typeof t.call)return t.apply(n,e)},each:function(t,e,n,i){var a,o,r;if(yn.isArray(t))if(o=t.length,i)for(a=o-1;a>=0;a--)e.call(n,t[a],a);else for(a=0;a<o;a++)e.call(n,t[a],a);else if(yn.isObject(t))for(r=Object.keys(t),o=r.length,a=0;a<o;a++)e.call(n,t[r[a]],r[a])},arrayEquals:function(t,e){var n,i,a,o;if(!t||!e||t.length!==e.length)return!1;for(n=0,i=t.length;n<i;++n)if(a=t[n],o=e[n],a instanceof Array&&o instanceof Array){if(!yn.arrayEquals(a,o))return!1}else if(a!==o)return!1;return!0},clone:function(t){if(yn.isArray(t))return t.map(yn.clone);if(yn.isObject(t)){for(var e={},n=Object.keys(t),i=n.length,a=0;a<i;++a)e[n[a]]=yn.clone(t[n[a]]);return e}return t},_merger:function(t,e,n,i){var a=e[t],o=n[t];yn.isObject(a)&&yn.isObject(o)?yn.merge(a,o,i):e[t]=yn.clone(o)},_mergerIf:function(t,e,n){var i=e[t],a=n[t];yn.isObject(i)&&yn.isObject(a)?yn.mergeIf(i,a):e.hasOwnProperty(t)||(e[t]=yn.clone(a))},merge:function(t,e,n){var i,a,o,r,s,l=yn.isArray(e)?e:[e],d=l.length;if(!yn.isObject(t))return t;for(n=n||{},i=n.merger||yn._merger,a=0;a<d;++a)if(e=l[a],yn.isObject(e))for(o=Object.keys(e),s=0,r=o.length;s<r;++s)i(o[s],t,e,n);return t},mergeIf:function(t,e){return yn.merge(t,e,{merger:yn._mergerIf})},extend:function(t){for(var e=function(e,n){t[n]=e},n=1,i=arguments.length;n<i;++n)yn.each(arguments[n],e);return t},inherits:function(t){var e=this,n=t&&t.hasOwnProperty("constructor")?t.constructor:function(){return e.apply(this,arguments)},i=function(){this.constructor=n};return i.prototype=e.prototype,n.prototype=new i,n.extend=yn.inherits,t&&yn.extend(n.prototype,t),n.__super__=e.prototype,n}},kn=yn;yn.callCallback=yn.callback,yn.indexOf=function(t,e,n){return Array.prototype.indexOf.call(t,e,n)},yn.getValueOrDefault=yn.valueOrDefault,yn.getValueAtIndexOrDefault=yn.valueAtIndexOrDefault;var wn={linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return-t*(t-2)},easeInOutQuad:function(t){return(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1)},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return(t-=1)*t*t+1},easeInOutCubic:function(t){return(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return-((t-=1)*t*t*t-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)},easeInQuint:function(t){return t*t*t*t*t},easeOutQuint:function(t){return(t-=1)*t*t*t*t+1},easeInOutQuint:function(t){return(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},easeInSine:function(t){return-Math.cos(t*(Math.PI/2))+1},easeOutSine:function(t){return Math.sin(t*(Math.PI/2))},easeInOutSine:function(t){return-.5*(Math.cos(Math.PI*t)-1)},easeInExpo:function(t){return 0===t?0:Math.pow(2,10*(t-1))},easeOutExpo:function(t){return 1===t?1:-Math.pow(2,-10*t)+1},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(-Math.pow(2,-10*--t)+2)},easeInCirc:function(t){return t>=1?t:-(Math.sqrt(1-t*t)-1)},easeOutCirc:function(t){return Math.sqrt(1-(t-=1)*t)},easeInOutCirc:function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeInElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:1===t?1:(n||(n=.3),i<1?(i=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/i),-(i*Math.pow(2,10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/n)))},easeOutElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:1===t?1:(n||(n=.3),i<1?(i=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/i),i*Math.pow(2,-10*t)*Math.sin((t-e)*(2*Math.PI)/n)+1)},easeInOutElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:2===(t/=.5)?1:(n||(n=.45),i<1?(i=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/i),t<1?-.5*(i*Math.pow(2,10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/n)):i*Math.pow(2,-10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/n)*.5+1)},easeInBack:function(t){var e=1.70158;return t*t*((e+1)*t-e)},easeOutBack:function(t){var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack:function(t){var e=1.70158;return(t/=.5)<1?.5*(t*t*(((e*=1.525)+1)*t-e)):.5*((t-=2)*t*(((e*=1.525)+1)*t+e)+2)},easeInBounce:function(t){return 1-wn.easeOutBounce(1-t)},easeOutBounce:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},easeInOutBounce:function(t){return t<.5?.5*wn.easeInBounce(2*t):.5*wn.easeOutBounce(2*t-1)+.5}},Mn={effects:wn};kn.easingEffects=wn;var _n=Math.PI,Cn=_n/180,Sn=2*_n,Pn=_n/2,In=_n/4,An=2*_n/3,Dn={clear:function(t){t.ctx.clearRect(0,0,t.width,t.height)},roundedRect:function(t,e,n,i,a,o){if(o){var r=Math.min(o,a/2,i/2),s=e+r,l=n+r,d=e+i-r,u=n+a-r;t.moveTo(e,l),s<d&&l<u?(t.arc(s,l,r,-_n,-Pn),t.arc(d,l,r,-Pn,0),t.arc(d,u,r,0,Pn),t.arc(s,u,r,Pn,_n)):s<d?(t.moveTo(s,n),t.arc(d,l,r,-Pn,Pn),t.arc(s,l,r,Pn,_n+Pn)):l<u?(t.arc(s,l,r,-_n,0),t.arc(s,u,r,0,_n)):t.arc(s,l,r,-_n,_n),t.closePath(),t.moveTo(e,n)}else t.rect(e,n,i,a)},drawPoint:function(t,e,n,i,a,o){var r,s,l,d,u,h=(o||0)*Cn;if(e&&"object"==typeof e&&(r=e.toString(),"[object HTMLImageElement]"===r||"[object HTMLCanvasElement]"===r))return void t.drawImage(e,i-e.width/2,a-e.height/2,e.width,e.height);if(!(isNaN(n)||n<=0)){switch(t.beginPath(),e){default:t.arc(i,a,n,0,Sn),t.closePath();break;case"triangle":t.moveTo(i+Math.sin(h)*n,a-Math.cos(h)*n),h+=An,t.lineTo(i+Math.sin(h)*n,a-Math.cos(h)*n),h+=An,t.lineTo(i+Math.sin(h)*n,a-Math.cos(h)*n),t.closePath();break;case"rectRounded":u=.516*n,d=n-u,s=Math.cos(h+In)*d,l=Math.sin(h+In)*d,t.arc(i-s,a-l,u,h-_n,h-Pn),t.arc(i+l,a-s,u,h-Pn,h),t.arc(i+s,a+l,u,h,h+Pn),t.arc(i-l,a+s,u,h+Pn,h+_n),t.closePath();break;case"rect":if(!o){d=Math.SQRT1_2*n,t.rect(i-d,a-d,2*d,2*d);break}h+=In;case"rectRot":s=Math.cos(h)*n,l=Math.sin(h)*n,t.moveTo(i-s,a-l),t.lineTo(i+l,a-s),t.lineTo(i+s,a+l),t.lineTo(i-l,a+s),t.closePath();break;case"crossRot":h+=In;case"cross":s=Math.cos(h)*n,l=Math.sin(h)*n,t.moveTo(i-s,a-l),t.lineTo(i+s,a+l),t.moveTo(i+l,a-s),t.lineTo(i-l,a+s);break;case"star":s=Math.cos(h)*n,l=Math.sin(h)*n,t.moveTo(i-s,a-l),t.lineTo(i+s,a+l),t.moveTo(i+l,a-s),t.lineTo(i-l,a+s),h+=In,s=Math.cos(h)*n,l=Math.sin(h)*n,t.moveTo(i-s,a-l),t.lineTo(i+s,a+l),t.moveTo(i+l,a-s),t.lineTo(i-l,a+s);break;case"line":s=Math.cos(h)*n,l=Math.sin(h)*n,t.moveTo(i-s,a-l),t.lineTo(i+s,a+l);break;case"dash":t.moveTo(i,a),t.lineTo(i+Math.cos(h)*n,a+Math.sin(h)*n)}t.fill(),t.stroke()}},_isPointInArea:function(t,e){var n=1e-6;return t.x>e.left-n&&t.x<e.right+n&&t.y>e.top-n&&t.y<e.bottom+n},clipArea:function(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()},unclipArea:function(t){t.restore()},lineTo:function(t,e,n,i){var a=n.steppedLine;if(a){if("middle"===a){var o=(e.x+n.x)/2;t.lineTo(o,i?n.y:e.y),t.lineTo(o,i?e.y:n.y)}else"after"===a&&!i||"after"!==a&&i?t.lineTo(e.x,n.y):t.lineTo(n.x,e.y);return void t.lineTo(n.x,n.y)}return n.tension?void t.bezierCurveTo(i?e.controlPointPreviousX:e.controlPointNextX,i?e.controlPointPreviousY:e.controlPointNextY,i?n.controlPointNextX:n.controlPointPreviousX,i?n.controlPointNextY:n.controlPointPreviousY,n.x,n.y):void t.lineTo(n.x,n.y)}},Tn=Dn;kn.clear=Dn.clear,kn.drawRoundedRectangle=function(t){t.beginPath(),Dn.roundedRect.apply(Dn,arguments)};var Fn={_set:function(t,e){return kn.merge(this[t]||(this[t]={}),e)}};Fn._set("global",{defaultColor:"rgba(0,0,0,0.1)",defaultFontColor:"#666",defaultFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",defaultFontSize:12,defaultFontStyle:"normal",defaultLineHeight:1.2,showLines:!0});var Ln=Fn,Rn=kn.valueOrDefault,On={toLineHeight:function(t,e){var n=(""+t).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);if(!n||"normal"===n[1])return 1.2*e;switch(t=+n[2],n[3]){case"px":return t;case"%":t/=100}return e*t},toPadding:function(t){var e,n,i,a;return kn.isObject(t)?(e=+t.top||0,n=+t.right||0,i=+t.bottom||0,a=+t.left||0):e=n=i=a=+t||0,{top:e,right:n,bottom:i,left:a,height:e+i,width:a+n}},_parseFont:function(t){var e=Ln.global,n=Rn(t.fontSize,e.defaultFontSize),i={family:Rn(t.fontFamily,e.defaultFontFamily),lineHeight:kn.options.toLineHeight(Rn(t.lineHeight,e.defaultLineHeight),n),size:n,style:Rn(t.fontStyle,e.defaultFontStyle),weight:null,string:""};return i.string=ht(i),i},resolve:function(t,e,n){var i,a,o;for(i=0,a=t.length;i<a;++i)if(o=t[i],void 0!==o&&(void 0!==e&&"function"==typeof o&&(o=o(e)),void 0!==n&&kn.isArray(o)&&(o=o[n]),void 0!==o))return o}},zn=kn,Bn=Mn,Nn=Tn,Wn=On;zn.easing=Bn,zn.canvas=Nn,zn.options=Wn;var Vn=function(t){zn.extend(this,t),this.initialize.apply(this,arguments)};zn.extend(Vn.prototype,{initialize:function(){this.hidden=!1},pivot:function(){var t=this;return t._view||(t._view=zn.clone(t._model)),t._start={},t},transition:function(t){var e=this,n=e._model,i=e._start,a=e._view;return n&&1!==t?(a||(a=e._view={}),i||(i=e._start={}),ct(i,a,n,t),e):(e._view=n,e._start=null,e)},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return zn.isNumber(this._model.x)&&zn.isNumber(this._model.y)}}),Vn.extend=zn.inherits;var En=Vn,Hn=En.extend({chart:null,currentStep:0,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null}),jn=Hn;Object.defineProperty(Hn.prototype,"animationObject",{get:function(){return this}}),Object.defineProperty(Hn.prototype,"chartInstance",{get:function(){return this.chart},set:function(t){this.chart=t}}),Ln._set("global",{animation:{duration:1e3,easing:"easeOutQuart",onProgress:zn.noop,onComplete:zn.noop}});var qn={animations:[],request:null,addAnimation:function(t,e,n,i){var a,o,r=this.animations;for(e.chart=t,e.startTime=Date.now(),e.duration=n,i||(t.animating=!0),a=0,o=r.length;a<o;++a)if(r[a].chart===t)return void(r[a]=e);r.push(e),1===r.length&&this.requestAnimationFrame()},cancelAnimation:function(t){var e=zn.findIndex(this.animations,function(e){return e.chart===t});e!==-1&&(this.animations.splice(e,1),t.animating=!1)},requestAnimationFrame:function(){var t=this;null===t.request&&(t.request=zn.requestAnimFrame.call(window,function(){t.request=null,t.startDigest()}))},startDigest:function(){var t=this;t.advance(),t.animations.length>0&&t.requestAnimationFrame()},advance:function(){for(var t,e,n,i,a=this.animations,o=0;o<a.length;)t=a[o],e=t.chart,n=t.numSteps,i=Math.floor((Date.now()-t.startTime)/t.duration*n)+1,t.currentStep=Math.min(i,n),zn.callback(t.render,[e,t],e),zn.callback(t.onAnimationProgress,[t],e),t.currentStep>=n?(zn.callback(t.onAnimationComplete,[t],e),e.animating=!1,a.splice(o,1)):++o}},Yn=zn.options.resolve,Un=["push","pop","shift","splice","unshift"],Xn=function(t,e){this.initialize(t,e)};zn.extend(Xn.prototype,{datasetElementType:null,dataElementType:null,initialize:function(t,e){var n=this;n.chart=t,n.index=e,n.linkScales(),n.addElements()},updateIndex:function(t){this.index=t},linkScales:function(){var t=this,e=t.getMeta(),n=t.getDataset();null!==e.xAxisID&&e.xAxisID in t.chart.scales||(e.xAxisID=n.xAxisID||t.chart.options.scales.xAxes[0].id),null!==e.yAxisID&&e.yAxisID in t.chart.scales||(e.yAxisID=n.yAxisID||t.chart.options.scales.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getMeta:function(){return this.chart.getDatasetMeta(this.index)},getScaleForId:function(t){return this.chart.scales[t]},_getValueScaleId:function(){return this.getMeta().yAxisID},_getIndexScaleId:function(){return this.getMeta().xAxisID},_getValueScale:function(){return this.getScaleForId(this._getValueScaleId())},_getIndexScale:function(){return this.getScaleForId(this._getIndexScaleId())},reset:function(){this.update(!0)},destroy:function(){this._data&&gt(this._data,this)},createMetaDataset:function(){var t=this,e=t.datasetElementType;return e&&new e({_chart:t.chart,_datasetIndex:t.index})},createMetaData:function(t){var e=this,n=e.dataElementType;return n&&new n({_chart:e.chart,_datasetIndex:e.index,_index:t})},addElements:function(){var t,e,n=this,i=n.getMeta(),a=n.getDataset().data||[],o=i.data;for(t=0,e=a.length;t<e;++t)o[t]=o[t]||n.createMetaData(t);i.dataset=i.dataset||n.createMetaDataset()},addElementAndReset:function(t){var e=this.createMetaData(t);this.getMeta().data.splice(t,0,e),this.updateElement(e,t,!0)},buildOrUpdateElements:function(){var t=this,e=t.getDataset(),n=e.data||(e.data=[]);t._data!==n&&(t._data&&gt(t._data,t),n&&Object.isExtensible(n)&&ft(n,t),t._data=n),t.resyncElements()},update:zn.noop,transition:function(t){for(var e=this.getMeta(),n=e.data||[],i=n.length,a=0;a<i;++a)n[a].transition(t);e.dataset&&e.dataset.transition(t)},draw:function(){var t=this.getMeta(),e=t.data||[],n=e.length,i=0;for(t.dataset&&t.dataset.draw();i<n;++i)e[i].draw()},removeHoverStyle:function(t){zn.merge(t._model,t.$previousStyle||{}),delete t.$previousStyle},setHoverStyle:function(t){var e=this.chart.data.datasets[t._datasetIndex],n=t._index,i=t.custom||{},a=t._model,o=zn.getHoverColor;t.$previousStyle={backgroundColor:a.backgroundColor,borderColor:a.borderColor,borderWidth:a.borderWidth},a.backgroundColor=Yn([i.hoverBackgroundColor,e.hoverBackgroundColor,o(a.backgroundColor)],void 0,n),a.borderColor=Yn([i.hoverBorderColor,e.hoverBorderColor,o(a.borderColor)],void 0,n),a.borderWidth=Yn([i.hoverBorderWidth,e.hoverBorderWidth,a.borderWidth],void 0,n)},resyncElements:function(){var t=this,e=t.getMeta(),n=t.getDataset().data,i=e.data.length,a=n.length;a<i?e.data.splice(a,i-a):a>i&&t.insertElements(i,a-i)},insertElements:function(t,e){for(var n=0;n<e;++n)this.addElementAndReset(t+n)},onDataPush:function(){var t=arguments.length;this.insertElements(this.getDataset().data.length-t,t)},onDataPop:function(){this.getMeta().data.pop()},onDataShift:function(){this.getMeta().data.shift()},onDataSplice:function(t,e){this.getMeta().data.splice(t,e),this.insertElements(t,arguments.length-2)},onDataUnshift:function(){this.insertElements(0,arguments.length)}}),Xn.extend=zn.inherits;var Kn=Xn;Ln._set("global",{elements:{arc:{backgroundColor:Ln.global.defaultColor,borderColor:"#fff",borderWidth:2,borderAlign:"center"}}});var Gn=En.extend({inLabelRange:function(t){var e=this._view;return!!e&&Math.pow(t-e.x,2)<Math.pow(e.radius+e.hoverRadius,2)},inRange:function(t,e){var n=this._view;if(n){for(var i=zn.getAngleFromPoint(n,{x:t,y:e}),a=i.angle,o=i.distance,r=n.startAngle,s=n.endAngle;s<r;)s+=2*Math.PI;for(;a>s;)a-=2*Math.PI;for(;a<r;)a+=2*Math.PI;var l=a>=r&&a<=s,d=o>=n.innerRadius&&o<=n.outerRadius;return l&&d}return!1},getCenterPoint:function(){var t=this._view,e=(t.startAngle+t.endAngle)/2,n=(t.innerRadius+t.outerRadius)/2;return{x:t.x+Math.cos(e)*n,y:t.y+Math.sin(e)*n}},getArea:function(){var t=this._view;return Math.PI*((t.endAngle-t.startAngle)/(2*Math.PI))*(Math.pow(t.outerRadius,2)-Math.pow(t.innerRadius,2))},tooltipPosition:function(){var t=this._view,e=t.startAngle+(t.endAngle-t.startAngle)/2,n=(t.outerRadius-t.innerRadius)/2+t.innerRadius;return{x:t.x+Math.cos(e)*n,y:t.y+Math.sin(e)*n}},draw:function(){var t,e=this._chart.ctx,n=this._view,i=n.startAngle,a=n.endAngle,o="inner"===n.borderAlign?.33:0;e.save(),e.beginPath(),e.arc(n.x,n.y,Math.max(n.outerRadius-o,0),i,a),e.arc(n.x,n.y,n.innerRadius,a,i,!0),e.closePath(),e.fillStyle=n.backgroundColor,e.fill(),n.borderWidth&&("inner"===n.borderAlign?(e.beginPath(),t=o/n.outerRadius,e.arc(n.x,n.y,n.outerRadius,i-t,a+t),n.innerRadius>o?(t=o/n.innerRadius,e.arc(n.x,n.y,n.innerRadius-o,a+t,i-t,!0)):e.arc(n.x,n.y,o,a+Math.PI/2,i-Math.PI/2),e.closePath(),e.clip(),e.beginPath(),e.arc(n.x,n.y,n.outerRadius,i,a),e.arc(n.x,n.y,n.innerRadius,a,i,!0),e.closePath(),e.lineWidth=2*n.borderWidth,e.lineJoin="round"):(e.lineWidth=n.borderWidth,e.lineJoin="bevel"),e.strokeStyle=n.borderColor,e.stroke()),e.restore()}}),Zn=zn.valueOrDefault,$n=Ln.global.defaultColor;Ln._set("global",{elements:{line:{tension:.4,backgroundColor:$n,borderWidth:3,borderColor:$n,borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",capBezierPoints:!0,fill:!0}}});var Jn=En.extend({draw:function(){var t,e,n,i,a=this,o=a._view,r=a._chart.ctx,s=o.spanGaps,l=a._children.slice(),d=Ln.global,u=d.elements.line,h=-1;for(a._loop&&l.length&&l.push(l[0]),r.save(),r.lineCap=o.borderCapStyle||u.borderCapStyle,r.setLineDash&&r.setLineDash(o.borderDash||u.borderDash),r.lineDashOffset=Zn(o.borderDashOffset,u.borderDashOffset),r.lineJoin=o.borderJoinStyle||u.borderJoinStyle,r.lineWidth=Zn(o.borderWidth,u.borderWidth),r.strokeStyle=o.borderColor||d.defaultColor,r.beginPath(),h=-1,t=0;t<l.length;++t)e=l[t],n=zn.previousItem(l,t),i=e._view,0===t?i.skip||(r.moveTo(i.x,i.y),h=t):(n=h===-1?n:l[h],i.skip||(h!==t-1&&!s||h===-1?r.moveTo(i.x,i.y):zn.canvas.lineTo(r,n._view,e._view),h=t));r.stroke(),r.restore()}}),Qn=zn.valueOrDefault,ti=Ln.global.defaultColor;Ln._set("global",{elements:{point:{radius:3,pointStyle:"circle",backgroundColor:ti,borderColor:ti,borderWidth:1,hitRadius:1,hoverRadius:4,hoverBorderWidth:1}}});var ei=En.extend({inRange:function(t,e){var n=this._view;return!!n&&Math.pow(t-n.x,2)+Math.pow(e-n.y,2)<Math.pow(n.hitRadius+n.radius,2)},inLabelRange:pt,inXRange:pt,inYRange:mt,getCenterPoint:function(){var t=this._view;return{x:t.x,y:t.y}},getArea:function(){return Math.PI*Math.pow(this._view.radius,2)},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y,padding:t.radius+t.borderWidth}},draw:function(t){var e=this._view,n=this._chart.ctx,i=e.pointStyle,a=e.rotation,o=e.radius,r=e.x,s=e.y,l=Ln.global,d=l.defaultColor;e.skip||(void 0===t||zn.canvas._isPointInArea(e,t))&&(n.strokeStyle=e.borderColor||d,n.lineWidth=Qn(e.borderWidth,l.elements.point.borderWidth),n.fillStyle=e.backgroundColor||d,zn.canvas.drawPoint(n,i,o,r,s,a))}}),ni=Ln.global.defaultColor;Ln._set("global",{elements:{rectangle:{backgroundColor:ni,borderColor:ni,borderSkipped:"bottom",borderWidth:0}}});var ii=En.extend({draw:function(){var t=this._chart.ctx,e=this._view,n=wt(e),i=n.outer,a=n.inner;t.fillStyle=e.backgroundColor,t.fillRect(i.x,i.y,i.w,i.h),i.w===a.w&&i.h===a.h||(t.save(),t.beginPath(),t.rect(i.x,i.y,i.w,i.h),t.clip(),t.fillStyle=e.borderColor,t.rect(a.x,a.y,a.w,a.h),t.fill("evenodd"),t.restore())},height:function(){var t=this._view;return t.base-t.y},inRange:function(t,e){return Mt(this._view,t,e)},inLabelRange:function(t,e){var n=this._view;return vt(n)?Mt(n,t,null):Mt(n,null,e)},inXRange:function(t){return Mt(this._view,t,null)},inYRange:function(t){return Mt(this._view,null,t)},getCenterPoint:function(){var t,e,n=this._view;return vt(n)?(t=n.x,e=(n.y+n.base)/2):(t=(n.x+n.base)/2,e=n.y),{x:t,y:e}},getArea:function(){var t=this._view;return vt(t)?t.width*Math.abs(t.y-t.base):t.height*Math.abs(t.x-t.base)},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y}}}),ai={},oi=Gn,ri=Jn,si=ei,li=ii;ai.Arc=oi,ai.Line=ri,ai.Point=si,ai.Rectangle=li;var di=zn.options.resolve;Ln._set("bar",{hover:{mode:"label"},scales:{xAxes:[{type:"category",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}],yAxes:[{type:"linear"}]}});var ui=Kn.extend({dataElementType:ai.Rectangle,initialize:function(){var t,e=this;Kn.prototype.initialize.apply(e,arguments),t=e.getMeta(),t.stack=e.getDataset().stack,t.bar=!0},update:function(t){var e,n,i=this,a=i.getMeta().data;for(i._ruler=i.getRuler(),e=0,n=a.length;e<n;++e)i.updateElement(a[e],e,t);
},updateElement:function(t,e,n){var i=this,a=i.getMeta(),o=i.getDataset(),r=i._resolveElementOptions(t,e);t._xScale=i.getScaleForId(a.xAxisID),t._yScale=i.getScaleForId(a.yAxisID),t._datasetIndex=i.index,t._index=e,t._model={backgroundColor:r.backgroundColor,borderColor:r.borderColor,borderSkipped:r.borderSkipped,borderWidth:r.borderWidth,datasetLabel:o.label,label:i.chart.data.labels[e]},i._updateElementGeometry(t,e,n),t.pivot()},_updateElementGeometry:function(t,e,n){var i=this,a=t._model,o=i._getValueScale(),r=o.getBasePixel(),s=o.isHorizontal(),l=i._ruler||i.getRuler(),d=i.calculateBarValuePixels(i.index,e),u=i.calculateBarIndexPixels(i.index,e,l);a.horizontal=s,a.base=n?r:d.base,a.x=s?n?r:d.head:u.center,a.y=s?u.center:n?r:d.head,a.height=s?u.size:void 0,a.width=s?void 0:u.size},_getStacks:function(t){var e,n,i=this,a=i.chart,o=i._getIndexScale(),r=o.options.stacked,s=void 0===t?a.data.datasets.length:t+1,l=[];for(e=0;e<s;++e)n=a.getDatasetMeta(e),n.bar&&a.isDatasetVisible(e)&&(r===!1||r===!0&&l.indexOf(n.stack)===-1||void 0===r&&(void 0===n.stack||l.indexOf(n.stack)===-1))&&l.push(n.stack);return l},getStackCount:function(){return this._getStacks().length},getStackIndex:function(t,e){var n=this._getStacks(t),i=void 0!==e?n.indexOf(e):-1;return i===-1?n.length-1:i},getRuler:function(){var t,e,n,i=this,a=i._getIndexScale(),o=i.getStackCount(),r=i.index,s=a.isHorizontal(),l=s?a.left:a.top,d=l+(s?a.width:a.height),u=[];for(t=0,e=i.getMeta().data.length;t<e;++t)u.push(a.getPixelForValue(null,t,r));return n=zn.isNullOrUndef(a.options.barThickness)?_t(a,u):-1,{min:n,pixels:u,start:l,end:d,stackCount:o,scale:a}},calculateBarValuePixels:function(t,e){var n,i,a,o,r,s,l=this,d=l.chart,u=l.getMeta(),h=l._getValueScale(),c=h.isHorizontal(),f=d.data.datasets,g=+h.getRightValue(f[t].data[e]),p=h.options.minBarLength,m=h.options.stacked,v=u.stack,b=0;if(m||void 0===m&&void 0!==v)for(n=0;n<t;++n)i=d.getDatasetMeta(n),i.bar&&i.stack===v&&i.controller._getValueScaleId()===h.id&&d.isDatasetVisible(n)&&(a=+h.getRightValue(f[n].data[e]),(g<0&&a<0||g>=0&&a>0)&&(b+=a));return o=h.getPixelForValue(b),r=h.getPixelForValue(b+g),s=r-o,void 0!==p&&Math.abs(s)<p&&(s=p,r=g>=0&&!c||g<0&&c?o-p:o+p),{size:s,base:o,head:r,center:r+s/2}},calculateBarIndexPixels:function(t,e,n){var i=this,a=n.scale.options,o="flex"===a.barThickness?St(e,n,a):Ct(e,n,a),r=i.getStackIndex(t,i.getMeta().stack),s=o.start+o.chunk*r+o.chunk/2,l=Math.min(zn.valueOrDefault(a.maxBarThickness,1/0),o.chunk*o.ratio);return{base:s-l/2,head:s+l/2,center:s,size:l}},draw:function(){var t=this,e=t.chart,n=t._getValueScale(),i=t.getMeta().data,a=t.getDataset(),o=i.length,r=0;for(zn.canvas.clipArea(e.ctx,e.chartArea);r<o;++r)isNaN(n.getRightValue(a.data[r]))||i[r].draw();zn.canvas.unclipArea(e.ctx)},_resolveElementOptions:function(t,e){var n,i,a,o=this,r=o.chart,s=r.data.datasets,l=s[o.index],d=t.custom||{},u=r.options.elements.rectangle,h={},c={chart:r,dataIndex:e,dataset:l,datasetIndex:o.index},f=["backgroundColor","borderColor","borderSkipped","borderWidth"];for(n=0,i=f.length;n<i;++n)a=f[n],h[a]=di([d[a],l[a],u[a]],c,e);return h}}),hi=zn.valueOrDefault,ci=zn.options.resolve;Ln._set("bubble",{hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{callbacks:{title:function(){return""},label:function(t,e){var n=e.datasets[t.datasetIndex].label||"",i=e.datasets[t.datasetIndex].data[t.index];return n+": ("+t.xLabel+", "+t.yLabel+", "+i.r+")"}}}});var fi=Kn.extend({dataElementType:ai.Point,update:function(t){var e=this,n=e.getMeta(),i=n.data;zn.each(i,function(n,i){e.updateElement(n,i,t)})},updateElement:function(t,e,n){var i=this,a=i.getMeta(),o=t.custom||{},r=i.getScaleForId(a.xAxisID),s=i.getScaleForId(a.yAxisID),l=i._resolveElementOptions(t,e),d=i.getDataset().data[e],u=i.index,h=n?r.getPixelForDecimal(.5):r.getPixelForValue("object"==typeof d?d:NaN,e,u),c=n?s.getBasePixel():s.getPixelForValue(d,e,u);t._xScale=r,t._yScale=s,t._options=l,t._datasetIndex=u,t._index=e,t._model={backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,hitRadius:l.hitRadius,pointStyle:l.pointStyle,rotation:l.rotation,radius:n?0:l.radius,skip:o.skip||isNaN(h)||isNaN(c),x:h,y:c},t.pivot()},setHoverStyle:function(t){var e=t._model,n=t._options,i=zn.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=hi(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=hi(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=hi(n.hoverBorderWidth,n.borderWidth),e.radius=n.radius+n.hoverRadius},_resolveElementOptions:function(t,e){var n,i,a,o=this,r=o.chart,s=r.data.datasets,l=s[o.index],d=t.custom||{},u=r.options.elements.point,h=l.data[e],c={},f={chart:r,dataIndex:e,dataset:l,datasetIndex:o.index},g=["backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","hoverRadius","hitRadius","pointStyle","rotation"];for(n=0,i=g.length;n<i;++n)a=g[n],c[a]=ci([d[a],l[a],u[a]],f,e);return c.radius=ci([d.radius,h?h.r:void 0,l.radius,u.radius],f,e),c}}),gi=zn.options.resolve,pi=zn.valueOrDefault;Ln._set("doughnut",{animation:{animateRotate:!0,animateScale:!1},hover:{mode:"single"},legendCallback:function(t){var e=[];e.push('<ul class="'+t.id+'-legend">');var n=t.data,i=n.datasets,a=n.labels;if(i.length)for(var o=0;o<i[0].data.length;++o)e.push('<li><span style="background-color:'+i[0].backgroundColor[o]+'"></span>'),a[o]&&e.push(a[o]),e.push("</li>");return e.push("</ul>"),e.join("")},legend:{labels:{generateLabels:function(t){var e=t.data;return e.labels.length&&e.datasets.length?e.labels.map(function(n,i){var a=t.getDatasetMeta(0),o=e.datasets[0],r=a.data[i],s=r&&r.custom||{},l=t.options.elements.arc,d=gi([s.backgroundColor,o.backgroundColor,l.backgroundColor],void 0,i),u=gi([s.borderColor,o.borderColor,l.borderColor],void 0,i),h=gi([s.borderWidth,o.borderWidth,l.borderWidth],void 0,i);return{text:n,fillStyle:d,strokeStyle:u,lineWidth:h,hidden:isNaN(o.data[i])||a.data[i].hidden,index:i}}):[]}},onClick:function(t,e){var n,i,a,o=e.index,r=this.chart;for(n=0,i=(r.data.datasets||[]).length;n<i;++n)a=r.getDatasetMeta(n),a.data[o]&&(a.data[o].hidden=!a.data[o].hidden);r.update()}},cutoutPercentage:50,rotation:Math.PI*-.5,circumference:2*Math.PI,tooltips:{callbacks:{title:function(){return""},label:function(t,e){var n=e.labels[t.index],i=": "+e.datasets[t.datasetIndex].data[t.index];return zn.isArray(n)?(n=n.slice(),n[0]+=i):n+=i,n}}}});var mi=Kn.extend({dataElementType:ai.Arc,linkScales:zn.noop,getRingIndex:function(t){for(var e=0,n=0;n<t;++n)this.chart.isDatasetVisible(n)&&++e;return e},update:function(t){var e,n,i=this,a=i.chart,o=a.chartArea,r=a.options,s=o.right-o.left,l=o.bottom-o.top,d=Math.min(s,l),u={x:0,y:0},h=i.getMeta(),c=h.data,f=r.cutoutPercentage,g=r.circumference,p=i._getRingWeight(i.index);if(g<2*Math.PI){var m=r.rotation%(2*Math.PI);m+=2*Math.PI*(m>=Math.PI?-1:m<-Math.PI?1:0);var v=m+g,b={x:Math.cos(m),y:Math.sin(m)},x={x:Math.cos(v),y:Math.sin(v)},y=m<=0&&v>=0||m<=2*Math.PI&&2*Math.PI<=v,k=m<=.5*Math.PI&&.5*Math.PI<=v||m<=2.5*Math.PI&&2.5*Math.PI<=v,w=m<=-Math.PI&&-Math.PI<=v||m<=Math.PI&&Math.PI<=v,M=m<=.5*-Math.PI&&.5*-Math.PI<=v||m<=1.5*Math.PI&&1.5*Math.PI<=v,_=f/100,C={x:w?-1:Math.min(b.x*(b.x<0?1:_),x.x*(x.x<0?1:_)),y:M?-1:Math.min(b.y*(b.y<0?1:_),x.y*(x.y<0?1:_))},S={x:y?1:Math.max(b.x*(b.x>0?1:_),x.x*(x.x>0?1:_)),y:k?1:Math.max(b.y*(b.y>0?1:_),x.y*(x.y>0?1:_))},P={width:.5*(S.x-C.x),height:.5*(S.y-C.y)};d=Math.min(s/P.width,l/P.height),u={x:(S.x+C.x)*-.5,y:(S.y+C.y)*-.5}}for(e=0,n=c.length;e<n;++e)c[e]._options=i._resolveElementOptions(c[e],e);for(a.borderWidth=i.getMaxBorderWidth(),a.outerRadius=Math.max((d-a.borderWidth)/2,0),a.innerRadius=Math.max(f?a.outerRadius/100*f:0,0),a.radiusLength=(a.outerRadius-a.innerRadius)/(i._getVisibleDatasetWeightTotal()||1),a.offsetX=u.x*a.outerRadius,a.offsetY=u.y*a.outerRadius,h.total=i.calculateTotal(),i.outerRadius=a.outerRadius-a.radiusLength*i._getRingWeightOffset(i.index),i.innerRadius=Math.max(i.outerRadius-a.radiusLength*p,0),e=0,n=c.length;e<n;++e)i.updateElement(c[e],e,t)},updateElement:function(t,e,n){var i=this,a=i.chart,o=a.chartArea,r=a.options,s=r.animation,l=(o.left+o.right)/2,d=(o.top+o.bottom)/2,u=r.rotation,h=r.rotation,c=i.getDataset(),f=n&&s.animateRotate?0:t.hidden?0:i.calculateCircumference(c.data[e])*(r.circumference/(2*Math.PI)),g=n&&s.animateScale?0:i.innerRadius,p=n&&s.animateScale?0:i.outerRadius,m=t._options||{};zn.extend(t,{_datasetIndex:i.index,_index:e,_model:{backgroundColor:m.backgroundColor,borderColor:m.borderColor,borderWidth:m.borderWidth,borderAlign:m.borderAlign,x:l+a.offsetX,y:d+a.offsetY,startAngle:u,endAngle:h,circumference:f,outerRadius:p,innerRadius:g,label:zn.valueAtIndexOrDefault(c.label,e,a.data.labels[e])}});var v=t._model;n&&s.animateRotate||(0===e?v.startAngle=r.rotation:v.startAngle=i.getMeta().data[e-1]._model.endAngle,v.endAngle=v.startAngle+v.circumference),t.pivot()},calculateTotal:function(){var t,e=this.getDataset(),n=this.getMeta(),i=0;return zn.each(n.data,function(n,a){t=e.data[a],isNaN(t)||n.hidden||(i+=Math.abs(t))}),i},calculateCircumference:function(t){var e=this.getMeta().total;return e>0&&!isNaN(t)?2*Math.PI*(Math.abs(t)/e):0},getMaxBorderWidth:function(t){var e,n,i,a,o,r,s,l,d=this,u=0,h=d.chart;if(!t)for(e=0,n=h.data.datasets.length;e<n;++e)if(h.isDatasetVisible(e)){i=h.getDatasetMeta(e),t=i.data,e!==d.index&&(o=i.controller);break}if(!t)return 0;for(e=0,n=t.length;e<n;++e)a=t[e],r=o?o._resolveElementOptions(a,e):a._options,"inner"!==r.borderAlign&&(s=r.borderWidth,l=r.hoverBorderWidth,u=s>u?s:u,u=l>u?l:u);return u},setHoverStyle:function(t){var e=t._model,n=t._options,i=zn.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth},e.backgroundColor=pi(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=pi(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=pi(n.hoverBorderWidth,n.borderWidth)},_resolveElementOptions:function(t,e){var n,i,a,o=this,r=o.chart,s=o.getDataset(),l=t.custom||{},d=r.options.elements.arc,u={},h={chart:r,dataIndex:e,dataset:s,datasetIndex:o.index},c=["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"];for(n=0,i=c.length;n<i;++n)a=c[n],u[a]=gi([l[a],s[a],d[a]],h,e);return u},_getRingWeightOffset:function(t){for(var e=0,n=0;n<t;++n)this.chart.isDatasetVisible(n)&&(e+=this._getRingWeight(n));return e},_getRingWeight:function(t){return Math.max(pi(this.chart.data.datasets[t].weight,1),0)},_getVisibleDatasetWeightTotal:function(){return this._getRingWeightOffset(this.chart.data.datasets.length)}});Ln._set("horizontalBar",{hover:{mode:"index",axis:"y"},scales:{xAxes:[{type:"linear",position:"bottom"}],yAxes:[{type:"category",position:"left",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}]},elements:{rectangle:{borderSkipped:"left"}},tooltips:{mode:"index",axis:"y"}});var vi=ui.extend({_getValueScaleId:function(){return this.getMeta().xAxisID},_getIndexScaleId:function(){return this.getMeta().yAxisID}}),bi=zn.valueOrDefault,xi=zn.options.resolve,yi=zn.canvas._isPointInArea;Ln._set("line",{showLines:!0,spanGaps:!1,hover:{mode:"label"},scales:{xAxes:[{type:"category",id:"x-axis-0"}],yAxes:[{type:"linear",id:"y-axis-0"}]}});var ki=Kn.extend({datasetElementType:ai.Line,dataElementType:ai.Point,update:function(t){var e,n,i=this,a=i.getMeta(),o=a.dataset,r=a.data||[],s=i.getScaleForId(a.yAxisID),l=i.getDataset(),d=Pt(l,i.chart.options);for(d&&(void 0!==l.tension&&void 0===l.lineTension&&(l.lineTension=l.tension),o._scale=s,o._datasetIndex=i.index,o._children=r,o._model=i._resolveLineOptions(o),o.pivot()),e=0,n=r.length;e<n;++e)i.updateElement(r[e],e,t);for(d&&0!==o._model.tension&&i.updateBezierControlPoints(),e=0,n=r.length;e<n;++e)r[e].pivot()},updateElement:function(t,e,n){var i,a,o=this,r=o.getMeta(),s=t.custom||{},l=o.getDataset(),d=o.index,u=l.data[e],h=o.getScaleForId(r.yAxisID),c=o.getScaleForId(r.xAxisID),f=r.dataset._model,g=o._resolvePointOptions(t,e);i=c.getPixelForValue("object"==typeof u?u:NaN,e,d),a=n?h.getBasePixel():o.calculatePointY(u,e,d),t._xScale=c,t._yScale=h,t._options=g,t._datasetIndex=d,t._index=e,t._model={x:i,y:a,skip:s.skip||isNaN(i)||isNaN(a),radius:g.radius,pointStyle:g.pointStyle,rotation:g.rotation,backgroundColor:g.backgroundColor,borderColor:g.borderColor,borderWidth:g.borderWidth,tension:bi(s.tension,f?f.tension:0),steppedLine:!!f&&f.steppedLine,hitRadius:g.hitRadius}},_resolvePointOptions:function(t,e){var n,i,a,o=this,r=o.chart,s=r.data.datasets[o.index],l=t.custom||{},d=r.options.elements.point,u={},h={chart:r,dataIndex:e,dataset:s,datasetIndex:o.index},c={backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},f=Object.keys(c);for(n=0,i=f.length;n<i;++n)a=f[n],u[a]=xi([l[a],s[c[a]],s[a],d[a]],h,e);return u},_resolveLineOptions:function(t){var e,n,i,a=this,o=a.chart,r=o.data.datasets[a.index],s=t.custom||{},l=o.options,d=l.elements.line,u={},h=["backgroundColor","borderWidth","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","fill","cubicInterpolationMode"];for(e=0,n=h.length;e<n;++e)i=h[e],u[i]=xi([s[i],r[i],d[i]]);return u.spanGaps=bi(r.spanGaps,l.spanGaps),u.tension=bi(r.lineTension,d.tension),u.steppedLine=xi([s.steppedLine,r.steppedLine,d.stepped]),u},calculatePointY:function(t,e,n){var i,a,o,r=this,s=r.chart,l=r.getMeta(),d=r.getScaleForId(l.yAxisID),u=0,h=0;if(d.options.stacked){for(i=0;i<n;i++)if(a=s.data.datasets[i],o=s.getDatasetMeta(i),"line"===o.type&&o.yAxisID===d.id&&s.isDatasetVisible(i)){var c=Number(d.getRightValue(a.data[e]));c<0?h+=c||0:u+=c||0}var f=Number(d.getRightValue(t));return f<0?d.getPixelForValue(h+f):d.getPixelForValue(u+f)}return d.getPixelForValue(t)},updateBezierControlPoints:function(){function t(t,e,n){return Math.max(Math.min(t,n),e)}var e,n,i,a,o=this,r=o.chart,s=o.getMeta(),l=s.dataset._model,d=r.chartArea,u=s.data||[];if(l.spanGaps&&(u=u.filter(function(t){return!t._model.skip})),"monotone"===l.cubicInterpolationMode)zn.splineCurveMonotone(u);else for(e=0,n=u.length;e<n;++e)i=u[e]._model,a=zn.splineCurve(zn.previousItem(u,e)._model,i,zn.nextItem(u,e)._model,l.tension),i.controlPointPreviousX=a.previous.x,i.controlPointPreviousY=a.previous.y,i.controlPointNextX=a.next.x,i.controlPointNextY=a.next.y;if(r.options.elements.line.capBezierPoints)for(e=0,n=u.length;e<n;++e)i=u[e]._model,yi(i,d)&&(e>0&&yi(u[e-1]._model,d)&&(i.controlPointPreviousX=t(i.controlPointPreviousX,d.left,d.right),i.controlPointPreviousY=t(i.controlPointPreviousY,d.top,d.bottom)),e<u.length-1&&yi(u[e+1]._model,d)&&(i.controlPointNextX=t(i.controlPointNextX,d.left,d.right),i.controlPointNextY=t(i.controlPointNextY,d.top,d.bottom)))},draw:function(){var t,e=this,n=e.chart,i=e.getMeta(),a=i.data||[],o=n.chartArea,r=a.length,s=0;for(Pt(e.getDataset(),n.options)&&(t=(i.dataset._model.borderWidth||0)/2,zn.canvas.clipArea(n.ctx,{left:o.left,right:o.right,top:o.top-t,bottom:o.bottom+t}),i.dataset.draw(),zn.canvas.unclipArea(n.ctx));s<r;++s)a[s].draw(o)},setHoverStyle:function(t){var e=t._model,n=t._options,i=zn.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=bi(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=bi(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=bi(n.hoverBorderWidth,n.borderWidth),e.radius=bi(n.hoverRadius,n.radius)}}),wi=zn.options.resolve;Ln._set("polarArea",{scale:{type:"radialLinear",angleLines:{display:!1},gridLines:{circular:!0},pointLabels:{display:!1},ticks:{beginAtZero:!0}},animation:{animateRotate:!0,animateScale:!0},startAngle:-.5*Math.PI,legendCallback:function(t){var e=[];e.push('<ul class="'+t.id+'-legend">');var n=t.data,i=n.datasets,a=n.labels;if(i.length)for(var o=0;o<i[0].data.length;++o)e.push('<li><span style="background-color:'+i[0].backgroundColor[o]+'"></span>'),a[o]&&e.push(a[o]),e.push("</li>");return e.push("</ul>"),e.join("")},legend:{labels:{generateLabels:function(t){var e=t.data;return e.labels.length&&e.datasets.length?e.labels.map(function(n,i){var a=t.getDatasetMeta(0),o=e.datasets[0],r=a.data[i],s=r.custom||{},l=t.options.elements.arc,d=wi([s.backgroundColor,o.backgroundColor,l.backgroundColor],void 0,i),u=wi([s.borderColor,o.borderColor,l.borderColor],void 0,i),h=wi([s.borderWidth,o.borderWidth,l.borderWidth],void 0,i);return{text:n,fillStyle:d,strokeStyle:u,lineWidth:h,hidden:isNaN(o.data[i])||a.data[i].hidden,index:i}}):[]}},onClick:function(t,e){var n,i,a,o=e.index,r=this.chart;for(n=0,i=(r.data.datasets||[]).length;n<i;++n)a=r.getDatasetMeta(n),a.data[o].hidden=!a.data[o].hidden;r.update()}},tooltips:{callbacks:{title:function(){return""},label:function(t,e){return e.labels[t.index]+": "+t.yLabel}}}});var Mi=Kn.extend({dataElementType:ai.Arc,linkScales:zn.noop,update:function(t){var e,n,i,a=this,o=a.getDataset(),r=a.getMeta(),s=a.chart.options.startAngle||0,l=a._starts=[],d=a._angles=[],u=r.data;for(a._updateRadius(),r.count=a.countVisibleElements(),e=0,n=o.data.length;e<n;e++)l[e]=s,i=a._computeAngle(e),d[e]=i,s+=i;for(e=0,n=u.length;e<n;++e)u[e]._options=a._resolveElementOptions(u[e],e),a.updateElement(u[e],e,t)},_updateRadius:function(){var t=this,e=t.chart,n=e.chartArea,i=e.options,a=Math.min(n.right-n.left,n.bottom-n.top);e.outerRadius=Math.max(a/2,0),e.innerRadius=Math.max(i.cutoutPercentage?e.outerRadius/100*i.cutoutPercentage:1,0),e.radiusLength=(e.outerRadius-e.innerRadius)/e.getVisibleDatasetCount(),t.outerRadius=e.outerRadius-e.radiusLength*t.index,t.innerRadius=t.outerRadius-e.radiusLength},updateElement:function(t,e,n){var i=this,a=i.chart,o=i.getDataset(),r=a.options,s=r.animation,l=a.scale,d=a.data.labels,u=l.xCenter,h=l.yCenter,c=r.startAngle,f=t.hidden?0:l.getDistanceFromCenterForValue(o.data[e]),g=i._starts[e],p=g+(t.hidden?0:i._angles[e]),m=s.animateScale?0:l.getDistanceFromCenterForValue(o.data[e]),v=t._options||{};zn.extend(t,{_datasetIndex:i.index,_index:e,_scale:l,_model:{backgroundColor:v.backgroundColor,borderColor:v.borderColor,borderWidth:v.borderWidth,borderAlign:v.borderAlign,x:u,y:h,innerRadius:0,outerRadius:n?m:f,startAngle:n&&s.animateRotate?c:g,endAngle:n&&s.animateRotate?c:p,label:zn.valueAtIndexOrDefault(d,e,d[e])}}),t.pivot()},countVisibleElements:function(){var t=this.getDataset(),e=this.getMeta(),n=0;return zn.each(e.data,function(e,i){isNaN(t.data[i])||e.hidden||n++}),n},setHoverStyle:function(t){var e=t._model,n=t._options,i=zn.getHoverColor,a=zn.valueOrDefault;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth},e.backgroundColor=a(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=a(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=a(n.hoverBorderWidth,n.borderWidth)},_resolveElementOptions:function(t,e){var n,i,a,o=this,r=o.chart,s=o.getDataset(),l=t.custom||{},d=r.options.elements.arc,u={},h={chart:r,dataIndex:e,dataset:s,datasetIndex:o.index},c=["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"];for(n=0,i=c.length;n<i;++n)a=c[n],u[a]=wi([l[a],s[a],d[a]],h,e);return u},_computeAngle:function(t){var e=this,n=this.getMeta().count,i=e.getDataset(),a=e.getMeta();if(isNaN(i.data[t])||a.data[t].hidden)return 0;var o={chart:e.chart,dataIndex:t,dataset:i,datasetIndex:e.index};return wi([e.chart.options.elements.arc.angle,2*Math.PI/n],o,t)}});Ln._set("pie",zn.clone(Ln.doughnut)),Ln._set("pie",{cutoutPercentage:0});var _i=mi,Ci=zn.valueOrDefault,Si=zn.options.resolve;Ln._set("radar",{scale:{type:"radialLinear"},elements:{line:{tension:0}}});var Pi=Kn.extend({datasetElementType:ai.Line,dataElementType:ai.Point,linkScales:zn.noop,update:function(t){var e,n,i=this,a=i.getMeta(),o=a.dataset,r=a.data||[],s=i.chart.scale,l=i.getDataset();for(void 0!==l.tension&&void 0===l.lineTension&&(l.lineTension=l.tension),o._scale=s,o._datasetIndex=i.index,o._children=r,o._loop=!0,o._model=i._resolveLineOptions(o),o.pivot(),e=0,n=r.length;e<n;++e)i.updateElement(r[e],e,t);for(i.updateBezierControlPoints(),e=0,n=r.length;e<n;++e)r[e].pivot()},updateElement:function(t,e,n){var i=this,a=t.custom||{},o=i.getDataset(),r=i.chart.scale,s=r.getPointPositionForValue(e,o.data[e]),l=i._resolvePointOptions(t,e),d=i.getMeta().dataset._model,u=n?r.xCenter:s.x,h=n?r.yCenter:s.y;t._scale=r,t._options=l,t._datasetIndex=i.index,t._index=e,t._model={x:u,y:h,skip:a.skip||isNaN(u)||isNaN(h),radius:l.radius,pointStyle:l.pointStyle,rotation:l.rotation,backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,tension:Ci(a.tension,d?d.tension:0),hitRadius:l.hitRadius}},_resolvePointOptions:function(t,e){var n,i,a,o=this,r=o.chart,s=r.data.datasets[o.index],l=t.custom||{},d=r.options.elements.point,u={},h={chart:r,dataIndex:e,dataset:s,datasetIndex:o.index},c={backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},f=Object.keys(c);for(n=0,i=f.length;n<i;++n)a=f[n],u[a]=Si([l[a],s[c[a]],s[a],d[a]],h,e);return u},_resolveLineOptions:function(t){var e,n,i,a=this,o=a.chart,r=o.data.datasets[a.index],s=t.custom||{},l=o.options.elements.line,d={},u=["backgroundColor","borderWidth","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","fill"];for(e=0,n=u.length;e<n;++e)i=u[e],d[i]=Si([s[i],r[i],l[i]]);return d.tension=Ci(r.lineTension,l.tension),d},updateBezierControlPoints:function(){function t(t,e,n){return Math.max(Math.min(t,n),e)}var e,n,i,a,o=this,r=o.getMeta(),s=o.chart.chartArea,l=r.data||[];for(e=0,n=l.length;e<n;++e)i=l[e]._model,a=zn.splineCurve(zn.previousItem(l,e,!0)._model,i,zn.nextItem(l,e,!0)._model,i.tension),i.controlPointPreviousX=t(a.previous.x,s.left,s.right),i.controlPointPreviousY=t(a.previous.y,s.top,s.bottom),i.controlPointNextX=t(a.next.x,s.left,s.right),i.controlPointNextY=t(a.next.y,s.top,s.bottom)},setHoverStyle:function(t){var e=t._model,n=t._options,i=zn.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=Ci(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=Ci(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=Ci(n.hoverBorderWidth,n.borderWidth),e.radius=Ci(n.hoverRadius,n.radius)}});Ln._set("scatter",{hover:{mode:"single"},scales:{xAxes:[{id:"x-axis-1",type:"linear",position:"bottom"}],yAxes:[{id:"y-axis-1",type:"linear",position:"left"}]},showLines:!1,tooltips:{callbacks:{title:function(){return""},label:function(t){return"("+t.xLabel+", "+t.yLabel+")"}}}});var Ii=ki,Ai={bar:ui,bubble:fi,doughnut:mi,horizontalBar:vi,line:ki,polarArea:Mi,pie:_i,radar:Pi,scatter:Ii},Di={modes:{single:function(t,e){var n=It(e,t),i=[];return At(t,function(t){if(t.inRange(n.x,n.y))return i.push(t),i}),i.slice(0,1)},label:Lt,index:Lt,dataset:function(t,e,n){var i=It(e,t);n.axis=n.axis||"xy";var a=Ft(n.axis),o=n.intersect?Dt(t,i):Tt(t,i,!1,a);return o.length>0&&(o=t.getDatasetMeta(o[0]._datasetIndex).data),o},"x-axis":function(t,e){return Lt(t,e,{intersect:!1})},point:function(t,e){var n=It(e,t);return Dt(t,n)},nearest:function(t,e,n){var i=It(e,t);n.axis=n.axis||"xy";var a=Ft(n.axis);return Tt(t,i,n.intersect,a)},x:function(t,e,n){var i=It(e,t),a=[],o=!1;return At(t,function(t){t.inXRange(i.x)&&a.push(t),t.inRange(i.x,i.y)&&(o=!0)}),n.intersect&&!o&&(a=[]),a},y:function(t,e,n){var i=It(e,t),a=[],o=!1;return At(t,function(t){t.inYRange(i.y)&&a.push(t),t.inRange(i.x,i.y)&&(o=!0)}),n.intersect&&!o&&(a=[]),a}}};Ln._set("global",{layout:{padding:{top:0,right:0,bottom:0,left:0}}});var Ti={defaults:{},addBox:function(t,e){t.boxes||(t.boxes=[]),e.fullWidth=e.fullWidth||!1,e.position=e.position||"top",e.weight=e.weight||0,t.boxes.push(e)},removeBox:function(t,e){var n=t.boxes?t.boxes.indexOf(e):-1;n!==-1&&t.boxes.splice(n,1)},configure:function(t,e,n){for(var i,a=["fullWidth","position","weight"],o=a.length,r=0;r<o;++r)i=a[r],n.hasOwnProperty(i)&&(e[i]=n[i])},update:function(t,e,n){function i(t){var e,n=t.isHorizontal();n?(e=t.update(t.fullWidth?w:S,M/2),P-=e.height):(e=t.update(C,P),S-=e.width),A.push({horizontal:n,width:e.width,box:t})}function a(t){var e=zn.findNextWhere(A,function(e){return e.box===t});if(e)if(e.horizontal){var n={left:Math.max(I.left,b.left),right:Math.max(I.right,b.right),top:0,bottom:0};t.update(t.fullWidth?w:S,M/2,n)}else t.update(e.width,P)}function o(t){var e=zn.findNextWhere(A,function(e){return e.box===t}),n={left:0,right:0,top:I.top,bottom:I.bottom};e&&t.update(e.width,P,n)}function r(t){t.isHorizontal()?(t.left=t.fullWidth?d:I.left,t.right=t.fullWidth?e-u:I.left+S,t.top=O,t.bottom=O+t.height,O=t.bottom):(t.left=R,t.right=R+t.width,t.top=I.top,t.bottom=I.top+P,R=t.right)}if(t){var s=t.options.layout||{},l=zn.options.toPadding(s.padding),d=l.left,u=l.right,h=l.top,c=l.bottom,f=Rt(t.boxes,"left"),g=Rt(t.boxes,"right"),p=Rt(t.boxes,"top"),m=Rt(t.boxes,"bottom"),v=Rt(t.boxes,"chartArea");Ot(f,!0),Ot(g,!1),Ot(p,!0),Ot(m,!1);var b,x=f.concat(g),y=p.concat(m),k=x.concat(y),w=e-d-u,M=n-h-c,_=w/2,C=(e-_)/x.length,S=w,P=M,I={top:h,left:d,bottom:c,right:u},A=[];zn.each(k,i),b=zt(k),zn.each(x,a),Bt(x,I),zn.each(y,a),Bt(y,I),zn.each(x,o),I={top:h,left:d,bottom:c,right:u},Bt(k,I);var D=Math.max(b.left-I.left,0);I.left+=D,I.right+=Math.max(b.right-I.right,0);var T=Math.max(b.top-I.top,0);I.top+=T,I.bottom+=Math.max(b.bottom-I.bottom,0);var F=n-I.top-I.bottom,L=e-I.left-I.right;L===S&&F===P||(zn.each(x,function(t){t.height=F}),zn.each(y,function(t){t.fullWidth||(t.width=L)}),P=F,S=L);var R=d+D,O=h+T;zn.each(f.concat(p),r),R+=S,O+=P,zn.each(g,r),zn.each(m,r),t.chartArea={left:I.left,top:I.top,right:I.left+S,bottom:I.top+P},zn.each(v,function(e){e.left=t.chartArea.left,e.top=t.chartArea.top,e.right=t.chartArea.right,e.bottom=t.chartArea.bottom,e.update(S,P)})}}},Fi={acquireContext:function(t){return t&&t.canvas&&(t=t.canvas),t&&t.getContext("2d")||null}},Li="/*\n * DOM element rendering detection\n * https://davidwalsh.name/detect-node-insertion\n */\n@keyframes chartjs-render-animation {\n\tfrom { opacity: 0.99; }\n\tto { opacity: 1; }\n}\n\n.chartjs-render-monitor {\n\tanimation: chartjs-render-animation 0.001s;\n}\n\n/*\n * DOM element resizing detection\n * https://github.com/marcj/css-element-queries\n */\n.chartjs-size-monitor,\n.chartjs-size-monitor-expand,\n.chartjs-size-monitor-shrink {\n\tposition: absolute;\n\tdirection: ltr;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\toverflow: hidden;\n\tpointer-events: none;\n\tvisibility: hidden;\n\tz-index: -1;\n}\n\n.chartjs-size-monitor-expand > div {\n\tposition: absolute;\n\twidth: 1000000px;\n\theight: 1000000px;\n\tleft: 0;\n\ttop: 0;\n}\n\n.chartjs-size-monitor-shrink > div {\n\tposition: absolute;\n\twidth: 200%;\n\theight: 200%;\n\tleft: 0;\n\ttop: 0;\n}\n",Ri=Object.freeze({"default":Li}),Oi=Nt(Ri),zi="$chartjs",Bi="chartjs-",Ni=Bi+"size-monitor",Wi=Bi+"render-monitor",Vi=Bi+"render-animation",Ei=["animationstart","webkitAnimationStart"],Hi={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},ji=function(){var t=!1;try{var e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("e",null,e)}catch(n){}return t}(),qi=!!ji&&{passive:!0},Yi={disableCSSInjection:!1,_enabled:"undefined"!=typeof window&&"undefined"!=typeof document,_ensureLoaded:function(){this._loaded||(this._loaded=!0,this.disableCSSInjection||Jt(this,Oi))},acquireContext:function(t,e){"string"==typeof t?t=document.getElementById(t):t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas);var n=t&&t.getContext&&t.getContext("2d");return this._ensureLoaded(),n&&n.canvas===t?(Vt(t,e),n):null},releaseContext:function(t){var e=t.canvas;if(e[zi]){var n=e[zi].initial;["height","width"].forEach(function(t){var i=n[t];zn.isNullOrUndef(i)?e.removeAttribute(t):e.setAttribute(t,i)}),zn.each(n.style||{},function(t,n){e.style[n]=t}),e.width=e.width,delete e[zi]}},addEventListener:function(t,e,n){var i=t.canvas;if("resize"===e)return void Zt(i,n,t);var a=n[zi]||(n[zi]={}),o=a.proxies||(a.proxies={}),r=o[t.id+"_"+e]=function(e){n(qt(e,t))};Et(i,e,r)},removeEventListener:function(t,e,n){var i=t.canvas;if("resize"===e)return void $t(i);var a=n[zi]||{},o=a.proxies||{},r=o[t.id+"_"+e];r&&Ht(i,e,r)}};zn.addEvent=Et,zn.removeEvent=Ht;var Ui=Yi._enabled?Yi:Fi,Xi=zn.extend({initialize:function(){},acquireContext:function(){},releaseContext:function(){},addEventListener:function(){},removeEventListener:function(){}},Ui);Ln._set("global",{plugins:{}});var Ki={_plugins:[],_cacheId:0,register:function(t){var e=this._plugins;[].concat(t).forEach(function(t){e.indexOf(t)===-1&&e.push(t)}),this._cacheId++},unregister:function(t){var e=this._plugins;[].concat(t).forEach(function(t){var n=e.indexOf(t);n!==-1&&e.splice(n,1)}),this._cacheId++},clear:function(){this._plugins=[],this._cacheId++},count:function(){return this._plugins.length},getAll:function(){return this._plugins},notify:function(t,e,n){var i,a,o,r,s,l=this.descriptors(t),d=l.length;for(i=0;i<d;++i)if(a=l[i],o=a.plugin,s=o[e],"function"==typeof s&&(r=[t].concat(n||[]),r.push(a.options),s.apply(o,r)===!1))return!1;return!0},descriptors:function(t){var e=t.$plugins||(t.$plugins={});if(e.id===this._cacheId)return e.descriptors;var n=[],i=[],a=t&&t.config||{},o=a.options&&a.options.plugins||{};return this._plugins.concat(a.plugins||[]).forEach(function(t){var e=n.indexOf(t);if(e===-1){var a=t.id,r=o[a];r!==!1&&(r===!0&&(r=zn.clone(Ln.global.plugins[a])),n.push(t),i.push({plugin:t,options:r||{}}))}}),e.descriptors=i,e.id=this._cacheId,i},_invalidate:function(t){delete t.$plugins}},Gi={constructors:{},defaults:{},registerScaleType:function(t,e,n){this.constructors[t]=e,this.defaults[t]=zn.clone(n)},getScaleConstructor:function(t){return this.constructors.hasOwnProperty(t)?this.constructors[t]:void 0},getScaleDefaults:function(t){return this.defaults.hasOwnProperty(t)?zn.merge({},[Ln.scale,this.defaults[t]]):{}},updateScaleDefaults:function(t,e){var n=this;n.defaults.hasOwnProperty(t)&&(n.defaults[t]=zn.extend(n.defaults[t],e))},addScalesToLayout:function(t){zn.each(t.scales,function(e){e.fullWidth=e.options.fullWidth,e.position=e.options.position,e.weight=e.options.weight,Ti.addBox(t,e)})}},Zi=zn.valueOrDefault;Ln._set("global",{tooltips:{enabled:!0,custom:null,mode:"nearest",position:"average",intersect:!0,backgroundColor:"rgba(0,0,0,0.8)",titleFontStyle:"bold",titleSpacing:2,titleMarginBottom:6,titleFontColor:"#fff",titleAlign:"left",bodySpacing:2,bodyFontColor:"#fff",bodyAlign:"left",footerFontStyle:"bold",footerSpacing:2,footerMarginTop:6,footerFontColor:"#fff",footerAlign:"left",yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,callbacks:{beforeTitle:zn.noop,title:function(t,e){var n="",i=e.labels,a=i?i.length:0;if(t.length>0){var o=t[0];o.label?n=o.label:o.xLabel?n=o.xLabel:a>0&&o.index<a&&(n=i[o.index])}return n},afterTitle:zn.noop,beforeBody:zn.noop,beforeLabel:zn.noop,label:function(t,e){
var n=e.datasets[t.datasetIndex].label||"";return n&&(n+=": "),n+=zn.isNullOrUndef(t.value)?t.yLabel:t.value},labelColor:function(t,e){var n=e.getDatasetMeta(t.datasetIndex),i=n.data[t.index],a=i._view;return{borderColor:a.borderColor,backgroundColor:a.backgroundColor}},labelTextColor:function(){return this._options.bodyFontColor},afterLabel:zn.noop,afterBody:zn.noop,beforeFooter:zn.noop,footer:zn.noop,afterFooter:zn.noop}}});var $i={average:function(t){if(!t.length)return!1;var e,n,i=0,a=0,o=0;for(e=0,n=t.length;e<n;++e){var r=t[e];if(r&&r.hasValue()){var s=r.tooltipPosition();i+=s.x,a+=s.y,++o}}return{x:i/o,y:a/o}},nearest:function(t,e){var n,i,a,o=e.x,r=e.y,s=Number.POSITIVE_INFINITY;for(n=0,i=t.length;n<i;++n){var l=t[n];if(l&&l.hasValue()){var d=l.getCenterPoint(),u=zn.distanceBetweenPoints(e,d);u<s&&(s=u,a=l)}}if(a){var h=a.tooltipPosition();o=h.x,r=h.y}return{x:o,y:r}}},Ji=En.extend({initialize:function(){this._model=ne(this._options),this._lastActive=[]},getTitle:function(){var t=this,e=t._options,n=e.callbacks,i=n.beforeTitle.apply(t,arguments),a=n.title.apply(t,arguments),o=n.afterTitle.apply(t,arguments),r=[];return r=Qt(r,te(i)),r=Qt(r,te(a)),r=Qt(r,te(o))},getBeforeBody:function(){return se(this._options.callbacks.beforeBody.apply(this,arguments))},getBody:function(t,e){var n=this,i=n._options.callbacks,a=[];return zn.each(t,function(t){var o={before:[],lines:[],after:[]};Qt(o.before,te(i.beforeLabel.call(n,t,e))),Qt(o.lines,i.label.call(n,t,e)),Qt(o.after,te(i.afterLabel.call(n,t,e))),a.push(o)}),a},getAfterBody:function(){return se(this._options.callbacks.afterBody.apply(this,arguments))},getFooter:function(){var t=this,e=t._options.callbacks,n=e.beforeFooter.apply(t,arguments),i=e.footer.apply(t,arguments),a=e.afterFooter.apply(t,arguments),o=[];return o=Qt(o,te(n)),o=Qt(o,te(i)),o=Qt(o,te(a))},update:function(t){var e,n,i=this,a=i._options,o=i._model,r=i._model=ne(a),s=i._active,l=i._data,d={xAlign:o.xAlign,yAlign:o.yAlign},u={x:o.x,y:o.y},h={width:o.width,height:o.height},c={x:o.caretX,y:o.caretY};if(s.length){r.opacity=1;var f=[],g=[];c=$i[a.position].call(i,s,i._eventPosition);var p=[];for(e=0,n=s.length;e<n;++e)p.push(ee(s[e]));a.filter&&(p=p.filter(function(t){return a.filter(t,l)})),a.itemSort&&(p=p.sort(function(t,e){return a.itemSort(t,e,l)})),zn.each(p,function(t){f.push(a.callbacks.labelColor.call(i,t,i._chart)),g.push(a.callbacks.labelTextColor.call(i,t,i._chart))}),r.title=i.getTitle(p,l),r.beforeBody=i.getBeforeBody(p,l),r.body=i.getBody(p,l),r.afterBody=i.getAfterBody(p,l),r.footer=i.getFooter(p,l),r.x=c.x,r.y=c.y,r.caretPadding=a.caretPadding,r.labelColors=f,r.labelTextColors=g,r.dataPoints=p,h=ie(this,r),d=ae(this,h),u=oe(r,h,d,i._chart)}else r.opacity=0;return r.xAlign=d.xAlign,r.yAlign=d.yAlign,r.x=u.x,r.y=u.y,r.width=h.width,r.height=h.height,r.caretX=c.x,r.caretY=c.y,i._model=r,t&&a.custom&&a.custom.call(i,r),i},drawCaret:function(t,e){var n=this._chart.ctx,i=this._view,a=this.getCaretPosition(t,e,i);n.lineTo(a.x1,a.y1),n.lineTo(a.x2,a.y2),n.lineTo(a.x3,a.y3)},getCaretPosition:function(t,e,n){var i,a,o,r,s,l,d=n.caretSize,u=n.cornerRadius,h=n.xAlign,c=n.yAlign,f=t.x,g=t.y,p=e.width,m=e.height;if("center"===c)s=g+m/2,"left"===h?(i=f,a=i-d,o=i,r=s+d,l=s-d):(i=f+p,a=i+d,o=i,r=s-d,l=s+d);else if("left"===h?(a=f+u+d,i=a-d,o=a+d):"right"===h?(a=f+p-u-d,i=a-d,o=a+d):(a=n.caretX,i=a-d,o=a+d),"top"===c)r=g,s=r-d,l=r;else{r=g+m,s=r+d,l=r;var v=o;o=i,i=v}return{x1:i,x2:a,x3:o,y1:r,y2:s,y3:l}},drawTitle:function(t,e,n){var i=e.title;if(i.length){t.x=re(e,e._titleAlign),n.textAlign=e._titleAlign,n.textBaseline="top";var a=e.titleFontSize,o=e.titleSpacing;n.fillStyle=e.titleFontColor,n.font=zn.fontString(a,e._titleFontStyle,e._titleFontFamily);var r,s;for(r=0,s=i.length;r<s;++r)n.fillText(i[r],t.x,t.y),t.y+=a+o,r+1===i.length&&(t.y+=e.titleMarginBottom-o)}},drawBody:function(t,e,n){var i,a=e.bodyFontSize,o=e.bodySpacing,r=e._bodyAlign,s=e.body,l=e.displayColors,d=e.labelColors,u=0,h=l?re(e,"left"):0;n.textAlign=r,n.textBaseline="top",n.font=zn.fontString(a,e._bodyFontStyle,e._bodyFontFamily),t.x=re(e,r);var c=function(e){n.fillText(e,t.x+u,t.y),t.y+=a+o};n.fillStyle=e.bodyFontColor,zn.each(e.beforeBody,c),u=l&&"right"!==r?"center"===r?a/2+1:a+2:0,zn.each(s,function(o,r){i=e.labelTextColors[r],n.fillStyle=i,zn.each(o.before,c),zn.each(o.lines,function(o){l&&(n.fillStyle=e.legendColorBackground,n.fillRect(h,t.y,a,a),n.lineWidth=1,n.strokeStyle=d[r].borderColor,n.strokeRect(h,t.y,a,a),n.fillStyle=d[r].backgroundColor,n.fillRect(h+1,t.y+1,a-2,a-2),n.fillStyle=i),c(o)}),zn.each(o.after,c)}),u=0,zn.each(e.afterBody,c),t.y-=o},drawFooter:function(t,e,n){var i=e.footer;i.length&&(t.x=re(e,e._footerAlign),t.y+=e.footerMarginTop,n.textAlign=e._footerAlign,n.textBaseline="top",n.fillStyle=e.footerFontColor,n.font=zn.fontString(e.footerFontSize,e._footerFontStyle,e._footerFontFamily),zn.each(i,function(i){n.fillText(i,t.x,t.y),t.y+=e.footerFontSize+e.footerSpacing}))},drawBackground:function(t,e,n,i){n.fillStyle=e.backgroundColor,n.strokeStyle=e.borderColor,n.lineWidth=e.borderWidth;var a=e.xAlign,o=e.yAlign,r=t.x,s=t.y,l=i.width,d=i.height,u=e.cornerRadius;n.beginPath(),n.moveTo(r+u,s),"top"===o&&this.drawCaret(t,i),n.lineTo(r+l-u,s),n.quadraticCurveTo(r+l,s,r+l,s+u),"center"===o&&"right"===a&&this.drawCaret(t,i),n.lineTo(r+l,s+d-u),n.quadraticCurveTo(r+l,s+d,r+l-u,s+d),"bottom"===o&&this.drawCaret(t,i),n.lineTo(r+u,s+d),n.quadraticCurveTo(r,s+d,r,s+d-u),"center"===o&&"left"===a&&this.drawCaret(t,i),n.lineTo(r,s+u),n.quadraticCurveTo(r,s,r+u,s),n.closePath(),n.fill(),e.borderWidth>0&&n.stroke()},draw:function(){var t=this._chart.ctx,e=this._view;if(0!==e.opacity){var n={width:e.width,height:e.height},i={x:e.x,y:e.y},a=Math.abs(e.opacity<.001)?0:e.opacity,o=e.title.length||e.beforeBody.length||e.body.length||e.afterBody.length||e.footer.length;this._options.enabled&&o&&(t.save(),t.globalAlpha=a,this.drawBackground(i,e,t,n),i.y+=e.yPadding,this.drawTitle(i,e,t),this.drawBody(i,e,t),this.drawFooter(i,e,t),t.restore())}},handleEvent:function(t){var e=this,n=e._options,i=!1;return e._lastActive=e._lastActive||[],"mouseout"===t.type?e._active=[]:e._active=e._chart.getElementsAtEventForMode(t,n.mode,n),i=!zn.arrayEquals(e._active,e._lastActive),i&&(e._lastActive=e._active,(n.enabled||n.custom)&&(e._eventPosition={x:t.x,y:t.y},e.update(!0),e.pivot())),i}}),Qi=$i,ta=Ji;ta.positioners=Qi;var ea=zn.valueOrDefault;Ln._set("global",{elements:{},events:["mousemove","mouseout","click","touchstart","touchmove"],hover:{onHover:null,mode:"nearest",intersect:!0,animationDuration:400},onClick:null,maintainAspectRatio:!0,responsive:!0,responsiveAnimationDuration:0});var na=function(t,e){return this.construct(t,e),this};zn.extend(na.prototype,{construct:function(t,e){var n=this;e=ue(e);var i=Xi.acquireContext(t,e),a=i&&i.canvas,o=a&&a.height,r=a&&a.width;return n.id=zn.uid(),n.ctx=i,n.canvas=a,n.config=e,n.width=r,n.height=o,n.aspectRatio=o?r/o:null,n.options=e.options,n._bufferedRender=!1,n.chart=n,n.controller=n,na.instances[n.id]=n,Object.defineProperty(n,"data",{get:function(){return n.config.data},set:function(t){n.config.data=t}}),i&&a?(n.initialize(),void n.update()):void console.error("Failed to create chart: can't acquire context from the given item")},initialize:function(){var t=this;return Ki.notify(t,"beforeInit"),zn.retinaScale(t,t.options.devicePixelRatio),t.bindEvents(),t.options.responsive&&t.resize(!0),t.ensureScalesHaveIDs(),t.buildOrUpdateScales(),t.initToolTip(),Ki.notify(t,"afterInit"),t},clear:function(){return zn.canvas.clear(this),this},stop:function(){return qn.cancelAnimation(this),this},resize:function(t){var e=this,n=e.options,i=e.canvas,a=n.maintainAspectRatio&&e.aspectRatio||null,o=Math.max(0,Math.floor(zn.getMaximumWidth(i))),r=Math.max(0,Math.floor(a?o/a:zn.getMaximumHeight(i)));if((e.width!==o||e.height!==r)&&(i.width=e.width=o,i.height=e.height=r,i.style.width=o+"px",i.style.height=r+"px",zn.retinaScale(e,n.devicePixelRatio),!t)){var s={width:o,height:r};Ki.notify(e,"resize",[s]),n.onResize&&n.onResize(e,s),e.stop(),e.update({duration:n.responsiveAnimationDuration})}},ensureScalesHaveIDs:function(){var t=this.options,e=t.scales||{},n=t.scale;zn.each(e.xAxes,function(t,e){t.id=t.id||"x-axis-"+e}),zn.each(e.yAxes,function(t,e){t.id=t.id||"y-axis-"+e}),n&&(n.id=n.id||"scale")},buildOrUpdateScales:function(){var t=this,e=t.options,n=t.scales||{},i=[],a=Object.keys(n).reduce(function(t,e){return t[e]=!1,t},{});e.scales&&(i=i.concat((e.scales.xAxes||[]).map(function(t){return{options:t,dtype:"category",dposition:"bottom"}}),(e.scales.yAxes||[]).map(function(t){return{options:t,dtype:"linear",dposition:"left"}}))),e.scale&&i.push({options:e.scale,dtype:"radialLinear",isDefault:!0,dposition:"chartArea"}),zn.each(i,function(e){var i=e.options,o=i.id,r=ea(i.type,e.dtype);ce(i.position)!==ce(e.dposition)&&(i.position=e.dposition),a[o]=!0;var s=null;if(o in n&&n[o].type===r)s=n[o],s.options=i,s.ctx=t.ctx,s.chart=t;else{var l=Gi.getScaleConstructor(r);if(!l)return;s=new l({id:o,type:r,options:i,ctx:t.ctx,chart:t}),n[s.id]=s}s.mergeTicksOptions(),e.isDefault&&(t.scale=s)}),zn.each(a,function(t,e){t||delete n[e]}),t.scales=n,Gi.addScalesToLayout(this)},buildOrUpdateControllers:function(){var t=this,e=[];return zn.each(t.data.datasets,function(n,i){var a=t.getDatasetMeta(i),o=n.type||t.config.type;if(a.type&&a.type!==o&&(t.destroyDatasetMeta(i),a=t.getDatasetMeta(i)),a.type=o,a.controller)a.controller.updateIndex(i),a.controller.linkScales();else{var r=Ai[a.type];if(void 0===r)throw new Error('"'+a.type+'" is not a chart type.');a.controller=new r(t,i),e.push(a.controller)}},t),e},resetElements:function(){var t=this;zn.each(t.data.datasets,function(e,n){t.getDatasetMeta(n).controller.reset()},t)},reset:function(){this.resetElements(),this.tooltip.initialize()},update:function(t){var e=this;if(t&&"object"==typeof t||(t={duration:t,lazy:arguments[1]}),he(e),Ki._invalidate(e),Ki.notify(e,"beforeUpdate")!==!1){e.tooltip._data=e.data;var n=e.buildOrUpdateControllers();zn.each(e.data.datasets,function(t,n){e.getDatasetMeta(n).controller.buildOrUpdateElements()},e),e.updateLayout(),e.options.animation&&e.options.animation.duration&&zn.each(n,function(t){t.reset()}),e.updateDatasets(),e.tooltip.initialize(),e.lastActive=[],Ki.notify(e,"afterUpdate"),e._bufferedRender?e._bufferedRequest={duration:t.duration,easing:t.easing,lazy:t.lazy}:e.render(t)}},updateLayout:function(){var t=this;Ki.notify(t,"beforeLayout")!==!1&&(Ti.update(this,this.width,this.height),Ki.notify(t,"afterScaleUpdate"),Ki.notify(t,"afterLayout"))},updateDatasets:function(){var t=this;if(Ki.notify(t,"beforeDatasetsUpdate")!==!1){for(var e=0,n=t.data.datasets.length;e<n;++e)t.updateDataset(e);Ki.notify(t,"afterDatasetsUpdate")}},updateDataset:function(t){var e=this,n=e.getDatasetMeta(t),i={meta:n,index:t};Ki.notify(e,"beforeDatasetUpdate",[i])!==!1&&(n.controller.update(),Ki.notify(e,"afterDatasetUpdate",[i]))},render:function(t){var e=this;t&&"object"==typeof t||(t={duration:t,lazy:arguments[1]});var n=e.options.animation,i=ea(t.duration,n&&n.duration),a=t.lazy;if(Ki.notify(e,"beforeRender")!==!1){var o=function(t){Ki.notify(e,"afterRender"),zn.callback(n&&n.onComplete,[t],e)};if(n&&i){var r=new jn({numSteps:i/16.66,easing:t.easing||n.easing,render:function(t,e){var n=zn.easing.effects[e.easing],i=e.currentStep,a=i/e.numSteps;t.draw(n(a),a,i)},onAnimationProgress:n.onProgress,onAnimationComplete:o});qn.addAnimation(e,r,i,a)}else e.draw(),o(new jn({numSteps:0,chart:e}));return e}},draw:function(t){var e=this;e.clear(),zn.isNullOrUndef(t)&&(t=1),e.transition(t),e.width<=0||e.height<=0||Ki.notify(e,"beforeDraw",[t])!==!1&&(zn.each(e.boxes,function(t){t.draw(e.chartArea)},e),e.drawDatasets(t),e._drawTooltip(t),Ki.notify(e,"afterDraw",[t]))},transition:function(t){for(var e=this,n=0,i=(e.data.datasets||[]).length;n<i;++n)e.isDatasetVisible(n)&&e.getDatasetMeta(n).controller.transition(t);e.tooltip.transition(t)},drawDatasets:function(t){var e=this;if(Ki.notify(e,"beforeDatasetsDraw",[t])!==!1){for(var n=(e.data.datasets||[]).length-1;n>=0;--n)e.isDatasetVisible(n)&&e.drawDataset(n,t);Ki.notify(e,"afterDatasetsDraw",[t])}},drawDataset:function(t,e){var n=this,i=n.getDatasetMeta(t),a={meta:i,index:t,easingValue:e};Ki.notify(n,"beforeDatasetDraw",[a])!==!1&&(i.controller.draw(e),Ki.notify(n,"afterDatasetDraw",[a]))},_drawTooltip:function(t){var e=this,n=e.tooltip,i={tooltip:n,easingValue:t};Ki.notify(e,"beforeTooltipDraw",[i])!==!1&&(n.draw(),Ki.notify(e,"afterTooltipDraw",[i]))},getElementAtEvent:function(t){return Di.modes.single(this,t)},getElementsAtEvent:function(t){return Di.modes.label(this,t,{intersect:!0})},getElementsAtXAxis:function(t){return Di.modes["x-axis"](this,t,{intersect:!0})},getElementsAtEventForMode:function(t,e,n){var i=Di.modes[e];return"function"==typeof i?i(this,t,n):[]},getDatasetAtEvent:function(t){return Di.modes.dataset(this,t,{intersect:!0})},getDatasetMeta:function(t){var e=this,n=e.data.datasets[t];n._meta||(n._meta={});var i=n._meta[e.id];return i||(i=n._meta[e.id]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null}),i},getVisibleDatasetCount:function(){for(var t=0,e=0,n=this.data.datasets.length;e<n;++e)this.isDatasetVisible(e)&&t++;return t},isDatasetVisible:function(t){var e=this.getDatasetMeta(t);return"boolean"==typeof e.hidden?!e.hidden:!this.data.datasets[t].hidden},generateLegend:function(){return this.options.legendCallback(this)},destroyDatasetMeta:function(t){var e=this.id,n=this.data.datasets[t],i=n._meta&&n._meta[e];i&&(i.controller.destroy(),delete n._meta[e])},destroy:function(){var t,e,n=this,i=n.canvas;for(n.stop(),t=0,e=n.data.datasets.length;t<e;++t)n.destroyDatasetMeta(t);i&&(n.unbindEvents(),zn.canvas.clear(n),Xi.releaseContext(n.ctx),n.canvas=null,n.ctx=null),Ki.notify(n,"destroy"),delete na.instances[n.id]},toBase64Image:function(){return this.canvas.toDataURL.apply(this.canvas,arguments)},initToolTip:function(){var t=this;t.tooltip=new ta({_chart:t,_chartInstance:t,_data:t.data,_options:t.options.tooltips},t)},bindEvents:function(){var t=this,e=t._listeners={},n=function(){t.eventHandler.apply(t,arguments)};zn.each(t.options.events,function(i){Xi.addEventListener(t,i,n),e[i]=n}),t.options.responsive&&(n=function(){t.resize()},Xi.addEventListener(t,"resize",n),e.resize=n)},unbindEvents:function(){var t=this,e=t._listeners;e&&(delete t._listeners,zn.each(e,function(e,n){Xi.removeEventListener(t,n,e)}))},updateHoverStyle:function(t,e,n){var i,a,o,r=n?"setHoverStyle":"removeHoverStyle";for(a=0,o=t.length;a<o;++a)i=t[a],i&&this.getDatasetMeta(i._datasetIndex).controller[r](i)},eventHandler:function(t){var e=this,n=e.tooltip;if(Ki.notify(e,"beforeEvent",[t])!==!1){e._bufferedRender=!0,e._bufferedRequest=null;var i=e.handleEvent(t);n&&(i=n._start?n.handleEvent(t):i|n.handleEvent(t)),Ki.notify(e,"afterEvent",[t]);var a=e._bufferedRequest;return a?e.render(a):i&&!e.animating&&(e.stop(),e.render({duration:e.options.hover.animationDuration,lazy:!0})),e._bufferedRender=!1,e._bufferedRequest=null,e}},handleEvent:function(t){var e=this,n=e.options||{},i=n.hover,a=!1;return e.lastActive=e.lastActive||[],"mouseout"===t.type?e.active=[]:e.active=e.getElementsAtEventForMode(t,i.mode,i),zn.callback(n.onHover||n.hover.onHover,[t["native"],e.active],e),"mouseup"!==t.type&&"click"!==t.type||n.onClick&&n.onClick.call(e,t["native"],e.active),e.lastActive.length&&e.updateHoverStyle(e.lastActive,i.mode,!1),e.active.length&&i.mode&&e.updateHoverStyle(e.active,i.mode,!0),a=!zn.arrayEquals(e.active,e.lastActive),e.lastActive=e.active,a}}),na.instances={};var ia=na;na.Controller=na,na.types={},zn.configMerge=de,zn.scaleMerge=le;var aa=function(){function t(t,e,n){var i;return"string"==typeof t?(i=parseInt(t,10),t.indexOf("%")!==-1&&(i=i/100*e.parentNode[n])):i=t,i}function e(t){return void 0!==t&&null!==t&&"none"!==t}function n(n,i,a){var o=document.defaultView,r=zn._getParentNode(n),s=o.getComputedStyle(n)[i],l=o.getComputedStyle(r)[i],d=e(s),u=e(l),h=Number.POSITIVE_INFINITY;return d||u?Math.min(d?t(s,n,a):h,u?t(l,r,a):h):"none"}zn.where=function(t,e){if(zn.isArray(t)&&Array.prototype.filter)return t.filter(e);var n=[];return zn.each(t,function(t){e(t)&&n.push(t)}),n},zn.findIndex=Array.prototype.findIndex?function(t,e,n){return t.findIndex(e,n)}:function(t,e,n){n=void 0===n?t:n;for(var i=0,a=t.length;i<a;++i)if(e.call(n,t[i],i,t))return i;return-1},zn.findNextWhere=function(t,e,n){zn.isNullOrUndef(n)&&(n=-1);for(var i=n+1;i<t.length;i++){var a=t[i];if(e(a))return a}},zn.findPreviousWhere=function(t,e,n){zn.isNullOrUndef(n)&&(n=t.length);for(var i=n-1;i>=0;i--){var a=t[i];if(e(a))return a}},zn.isNumber=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},zn.almostEquals=function(t,e,n){return Math.abs(t-e)<n},zn.almostWhole=function(t,e){var n=Math.round(t);return n-e<t&&n+e>t},zn.max=function(t){return t.reduce(function(t,e){return isNaN(e)?t:Math.max(t,e)},Number.NEGATIVE_INFINITY)},zn.min=function(t){return t.reduce(function(t,e){return isNaN(e)?t:Math.min(t,e)},Number.POSITIVE_INFINITY)},zn.sign=Math.sign?function(t){return Math.sign(t)}:function(t){return t=+t,0===t||isNaN(t)?t:t>0?1:-1},zn.log10=Math.log10?function(t){return Math.log10(t)}:function(t){var e=Math.log(t)*Math.LOG10E,n=Math.round(e),i=t===Math.pow(10,n);return i?n:e},zn.toRadians=function(t){return t*(Math.PI/180)},zn.toDegrees=function(t){return t*(180/Math.PI)},zn._decimalPlaces=function(t){if(zn.isFinite(t)){for(var e=1,n=0;Math.round(t*e)/e!==t;)e*=10,n++;return n}},zn.getAngleFromPoint=function(t,e){var n=e.x-t.x,i=e.y-t.y,a=Math.sqrt(n*n+i*i),o=Math.atan2(i,n);return o<-.5*Math.PI&&(o+=2*Math.PI),{angle:o,distance:a}},zn.distanceBetweenPoints=function(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))},zn.aliasPixel=function(t){return t%2===0?0:.5},zn._alignPixel=function(t,e,n){var i=t.currentDevicePixelRatio,a=n/2;return Math.round((e-a)*i)/i+a},zn.splineCurve=function(t,e,n,i){var a=t.skip?e:t,o=e,r=n.skip?e:n,s=Math.sqrt(Math.pow(o.x-a.x,2)+Math.pow(o.y-a.y,2)),l=Math.sqrt(Math.pow(r.x-o.x,2)+Math.pow(r.y-o.y,2)),d=s/(s+l),u=l/(s+l);d=isNaN(d)?0:d,u=isNaN(u)?0:u;var h=i*d,c=i*u;return{previous:{x:o.x-h*(r.x-a.x),y:o.y-h*(r.y-a.y)},next:{x:o.x+c*(r.x-a.x),y:o.y+c*(r.y-a.y)}}},zn.EPSILON=Number.EPSILON||1e-14,zn.splineCurveMonotone=function(t){var e,n,i,a,o=(t||[]).map(function(t){return{model:t._model,deltaK:0,mK:0}}),r=o.length;for(e=0;e<r;++e)if(i=o[e],!i.model.skip){if(n=e>0?o[e-1]:null,a=e<r-1?o[e+1]:null,a&&!a.model.skip){var s=a.model.x-i.model.x;i.deltaK=0!==s?(a.model.y-i.model.y)/s:0}!n||n.model.skip?i.mK=i.deltaK:!a||a.model.skip?i.mK=n.deltaK:this.sign(n.deltaK)!==this.sign(i.deltaK)?i.mK=0:i.mK=(n.deltaK+i.deltaK)/2}var l,d,u,h;for(e=0;e<r-1;++e)i=o[e],a=o[e+1],i.model.skip||a.model.skip||(zn.almostEquals(i.deltaK,0,this.EPSILON)?i.mK=a.mK=0:(l=i.mK/i.deltaK,d=a.mK/i.deltaK,h=Math.pow(l,2)+Math.pow(d,2),h<=9||(u=3/Math.sqrt(h),i.mK=l*u*i.deltaK,a.mK=d*u*i.deltaK)));var c;for(e=0;e<r;++e)i=o[e],i.model.skip||(n=e>0?o[e-1]:null,a=e<r-1?o[e+1]:null,n&&!n.model.skip&&(c=(i.model.x-n.model.x)/3,i.model.controlPointPreviousX=i.model.x-c,i.model.controlPointPreviousY=i.model.y-c*i.mK),a&&!a.model.skip&&(c=(a.model.x-i.model.x)/3,i.model.controlPointNextX=i.model.x+c,i.model.controlPointNextY=i.model.y+c*i.mK))},zn.nextItem=function(t,e,n){return n?e>=t.length-1?t[0]:t[e+1]:e>=t.length-1?t[t.length-1]:t[e+1]},zn.previousItem=function(t,e,n){return n?e<=0?t[t.length-1]:t[e-1]:e<=0?t[0]:t[e-1]},zn.niceNum=function(t,e){var n,i=Math.floor(zn.log10(t)),a=t/Math.pow(10,i);return n=e?a<1.5?1:a<3?2:a<7?5:10:a<=1?1:a<=2?2:a<=5?5:10,n*Math.pow(10,i)},zn.requestAnimFrame=function(){return"undefined"==typeof window?function(t){t()}:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)}}(),zn.getRelativePosition=function(t,e){var n,i,a=t.originalEvent||t,o=t.target||t.srcElement,r=o.getBoundingClientRect(),s=a.touches;s&&s.length>0?(n=s[0].clientX,i=s[0].clientY):(n=a.clientX,i=a.clientY);var l=parseFloat(zn.getStyle(o,"padding-left")),d=parseFloat(zn.getStyle(o,"padding-top")),u=parseFloat(zn.getStyle(o,"padding-right")),h=parseFloat(zn.getStyle(o,"padding-bottom")),c=r.right-r.left-l-u,f=r.bottom-r.top-d-h;return n=Math.round((n-r.left-l)/c*o.width/e.currentDevicePixelRatio),i=Math.round((i-r.top-d)/f*o.height/e.currentDevicePixelRatio),{x:n,y:i}},zn.getConstraintWidth=function(t){return n(t,"max-width","clientWidth")},zn.getConstraintHeight=function(t){return n(t,"max-height","clientHeight")},zn._calculatePadding=function(t,e,n){return e=zn.getStyle(t,e),e.indexOf("%")>-1?n*parseInt(e,10)/100:parseInt(e,10)},zn._getParentNode=function(t){var e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e},zn.getMaximumWidth=function(t){var e=zn._getParentNode(t);if(!e)return t.clientWidth;var n=e.clientWidth,i=zn._calculatePadding(e,"padding-left",n),a=zn._calculatePadding(e,"padding-right",n),o=n-i-a,r=zn.getConstraintWidth(t);return isNaN(r)?o:Math.min(o,r)},zn.getMaximumHeight=function(t){var e=zn._getParentNode(t);if(!e)return t.clientHeight;var n=e.clientHeight,i=zn._calculatePadding(e,"padding-top",n),a=zn._calculatePadding(e,"padding-bottom",n),o=n-i-a,r=zn.getConstraintHeight(t);return isNaN(r)?o:Math.min(o,r)},zn.getStyle=function(t,e){return t.currentStyle?t.currentStyle[e]:document.defaultView.getComputedStyle(t,null).getPropertyValue(e)},zn.retinaScale=function(t,e){var n=t.currentDevicePixelRatio=e||"undefined"!=typeof window&&window.devicePixelRatio||1;if(1!==n){var i=t.canvas,a=t.height,o=t.width;i.height=a*n,i.width=o*n,t.ctx.scale(n,n),i.style.height||i.style.width||(i.style.height=a+"px",i.style.width=o+"px")}},zn.fontString=function(t,e,n){return e+" "+t+"px "+n},zn.longestText=function(t,e,n,i){i=i||{};var a=i.data=i.data||{},o=i.garbageCollect=i.garbageCollect||[];i.font!==e&&(a=i.data={},o=i.garbageCollect=[],i.font=e),t.font=e;var r=0;zn.each(n,function(e){void 0!==e&&null!==e&&zn.isArray(e)!==!0?r=zn.measureText(t,a,o,r,e):zn.isArray(e)&&zn.each(e,function(e){void 0===e||null===e||zn.isArray(e)||(r=zn.measureText(t,a,o,r,e))})});var s=o.length/2;if(s>n.length){for(var l=0;l<s;l++)delete a[o[l]];o.splice(0,s)}return r},zn.measureText=function(t,e,n,i,a){var o=e[a];return o||(o=e[a]=t.measureText(a).width,n.push(a)),o>i&&(i=o),i},zn.numberOfLabelLines=function(t){var e=1;return zn.each(t,function(t){zn.isArray(t)&&t.length>e&&(e=t.length)}),e},zn.color=xn?function(t){return t instanceof CanvasGradient&&(t=Ln.global.defaultColor),xn(t)}:function(t){return console.error("Color.js not found!"),t},zn.getHoverColor=function(t){return t instanceof CanvasPattern||t instanceof CanvasGradient?t:zn.color(t).saturate(.5).darken(.1).rgbString()}};zn.extend(ge.prototype,{formats:fe,parse:fe,format:fe,add:fe,diff:fe,startOf:fe,endOf:fe,_create:function(t){return t}}),ge.override=function(t){zn.extend(ge.prototype,t)};var oa=ge,ra={_date:oa},sa={formatters:{values:function(t){return zn.isArray(t)?t:""+t},linear:function(t,e,n){var i=n.length>3?n[2]-n[1]:n[1]-n[0];Math.abs(i)>1&&t!==Math.floor(t)&&(i=t-Math.floor(t));var a=zn.log10(Math.abs(i)),o="";if(0!==t){var r=Math.max(Math.abs(n[0]),Math.abs(n[n.length-1]));if(r<1e-4){var s=zn.log10(Math.abs(t));o=t.toExponential(Math.floor(s)-Math.floor(a))}else{var l=-1*Math.floor(a);l=Math.max(Math.min(l,20),0),o=t.toFixed(l)}}else o="0";return o},logarithmic:function(t,e,n){var i=t/Math.pow(10,Math.floor(zn.log10(t)));return 0===t?"0":1===i||2===i||5===i||0===e||e===n.length-1?t.toExponential():""}}},la=zn.valueOrDefault,da=zn.valueAtIndexOrDefault;Ln._set("scale",{display:!0,position:"left",offset:!1,gridLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineBorderDash:[],zeroLineBorderDashOffset:0,offsetGridLines:!1,borderDash:[],borderDashOffset:0},scaleLabel:{display:!1,labelString:"",padding:{top:4,bottom:4}},ticks:{beginAtZero:!1,minRotation:0,maxRotation:50,mirror:!1,padding:0,reverse:!1,display:!0,autoSkip:!0,autoSkipPadding:0,labelOffset:0,callback:sa.formatters.values,minor:{},major:{}}});var ua=En.extend({getPadding:function(){var t=this;return{left:t.paddingLeft||0,top:t.paddingTop||0,right:t.paddingRight||0,bottom:t.paddingBottom||0}},getTicks:function(){return this._ticks},mergeTicksOptions:function(){var t=this.options.ticks;t.minor===!1&&(t.minor={display:!1}),t.major===!1&&(t.major={display:!1});for(var e in t)"major"!==e&&"minor"!==e&&("undefined"==typeof t.minor[e]&&(t.minor[e]=t[e]),"undefined"==typeof t.major[e]&&(t.major[e]=t[e]))},beforeUpdate:function(){zn.callback(this.options.beforeUpdate,[this])},update:function(t,e,n){var i,a,o,r,s,l,d=this;for(d.beforeUpdate(),d.maxWidth=t,d.maxHeight=e,d.margins=zn.extend({left:0,right:0,top:0,bottom:0},n),d._maxLabelLines=0,d.longestLabelWidth=0,d.longestTextCache=d.longestTextCache||{},d.beforeSetDimensions(),d.setDimensions(),d.afterSetDimensions(),d.beforeDataLimits(),d.determineDataLimits(),d.afterDataLimits(),d.beforeBuildTicks(),s=d.buildTicks()||[],s=d.afterBuildTicks(s)||s,d.beforeTickToLabelConversion(),o=d.convertTicksToLabels(s)||d.ticks,d.afterTickToLabelConversion(),d.ticks=o,i=0,a=o.length;i<a;++i)r=o[i],l=s[i],l?l.label=r:s.push(l={label:r,major:!1});return d._ticks=s,d.beforeCalculateTickRotation(),d.calculateTickRotation(),d.afterCalculateTickRotation(),d.beforeFit(),d.fit(),d.afterFit(),d.afterUpdate(),d.minSize},afterUpdate:function(){zn.callback(this.options.afterUpdate,[this])},beforeSetDimensions:function(){zn.callback(this.options.beforeSetDimensions,[this])},setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0},afterSetDimensions:function(){zn.callback(this.options.afterSetDimensions,[this])},beforeDataLimits:function(){zn.callback(this.options.beforeDataLimits,[this])},determineDataLimits:zn.noop,afterDataLimits:function(){zn.callback(this.options.afterDataLimits,[this])},beforeBuildTicks:function(){zn.callback(this.options.beforeBuildTicks,[this])},buildTicks:zn.noop,afterBuildTicks:function(t){var e=this;return zn.isArray(t)&&t.length?zn.callback(e.options.afterBuildTicks,[e,t]):(e.ticks=zn.callback(e.options.afterBuildTicks,[e,e.ticks])||e.ticks,t)},beforeTickToLabelConversion:function(){zn.callback(this.options.beforeTickToLabelConversion,[this])},convertTicksToLabels:function(){var t=this,e=t.options.ticks;t.ticks=t.ticks.map(e.userCallback||e.callback,this)},afterTickToLabelConversion:function(){zn.callback(this.options.afterTickToLabelConversion,[this])},beforeCalculateTickRotation:function(){zn.callback(this.options.beforeCalculateTickRotation,[this])},calculateTickRotation:function(){var t=this,e=t.ctx,n=t.options.ticks,i=pe(t._ticks),a=zn.options._parseFont(n);e.font=a.string;var o=n.minRotation||0;if(i.length&&t.options.display&&t.isHorizontal())for(var r,s,l=zn.longestText(e,a.string,i,t.longestTextCache),d=l,u=t.getPixelForTick(1)-t.getPixelForTick(0)-6;d>u&&o<n.maxRotation;){var h=zn.toRadians(o);if(r=Math.cos(h),s=Math.sin(h),s*l>t.maxHeight){o--;break}o++,d=r*l}t.labelRotation=o},afterCalculateTickRotation:function(){zn.callback(this.options.afterCalculateTickRotation,[this])},beforeFit:function(){zn.callback(this.options.beforeFit,[this])},fit:function(){var t=this,e=t.minSize={width:0,height:0},n=pe(t._ticks),i=t.options,a=i.ticks,o=i.scaleLabel,r=i.gridLines,s=t._isVisible(),l=i.position,d=t.isHorizontal(),u=zn.options._parseFont,h=u(a),c=i.gridLines.tickMarkLength;if(d?e.width=t.isFullWidth()?t.maxWidth-t.margins.left-t.margins.right:t.maxWidth:e.width=s&&r.drawTicks?c:0,d?e.height=s&&r.drawTicks?c:0:e.height=t.maxHeight,o.display&&s){var f=u(o),g=zn.options.toPadding(o.padding),p=f.lineHeight+g.height;d?e.height+=p:e.width+=p}if(a.display&&s){var m=zn.longestText(t.ctx,h.string,n,t.longestTextCache),v=zn.numberOfLabelLines(n),b=.5*h.size,x=t.options.ticks.padding;if(t._maxLabelLines=v,t.longestLabelWidth=m,d){var y=zn.toRadians(t.labelRotation),k=Math.cos(y),w=Math.sin(y),M=w*m+h.lineHeight*v+b;e.height=Math.min(t.maxHeight,e.height+M+x),t.ctx.font=h.string;var _,C,S=ve(t.ctx,n[0],h.string),P=ve(t.ctx,n[n.length-1],h.string),I=t.getPixelForTick(0)-t.left,A=t.right-t.getPixelForTick(n.length-1);0!==t.labelRotation?(_="bottom"===l?k*S:k*b,C="bottom"===l?k*b:k*P):(_=S/2,C=P/2),t.paddingLeft=Math.max(_-I,0)+3,t.paddingRight=Math.max(C-A,0)+3}else a.mirror?m=0:m+=x+b,e.width=Math.min(t.maxWidth,e.width+m),t.paddingTop=h.size/2,t.paddingBottom=h.size/2}t.handleMargins(),t.width=e.width,t.height=e.height},handleMargins:function(){var t=this;t.margins&&(t.paddingLeft=Math.max(t.paddingLeft-t.margins.left,0),t.paddingTop=Math.max(t.paddingTop-t.margins.top,0),t.paddingRight=Math.max(t.paddingRight-t.margins.right,0),t.paddingBottom=Math.max(t.paddingBottom-t.margins.bottom,0))},afterFit:function(){zn.callback(this.options.afterFit,[this])},isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},isFullWidth:function(){return this.options.fullWidth},getRightValue:function(t){if(zn.isNullOrUndef(t))return NaN;if(("number"==typeof t||t instanceof Number)&&!isFinite(t))return NaN;if(t)if(this.isHorizontal()){if(void 0!==t.x)return this.getRightValue(t.x)}else if(void 0!==t.y)return this.getRightValue(t.y);return t},getLabelForIndex:zn.noop,getPixelForValue:zn.noop,getValueForPixel:zn.noop,getPixelForTick:function(t){var e=this,n=e.options.offset;if(e.isHorizontal()){var i=e.width-(e.paddingLeft+e.paddingRight),a=i/Math.max(e._ticks.length-(n?0:1),1),o=a*t+e.paddingLeft;n&&(o+=a/2);var r=e.left+o;return r+=e.isFullWidth()?e.margins.left:0}var s=e.height-(e.paddingTop+e.paddingBottom);return e.top+t*(s/(e._ticks.length-1))},getPixelForDecimal:function(t){var e=this;if(e.isHorizontal()){var n=e.width-(e.paddingLeft+e.paddingRight),i=n*t+e.paddingLeft,a=e.left+i;return a+=e.isFullWidth()?e.margins.left:0}return e.top+t*e.height},getBasePixel:function(){return this.getPixelForValue(this.getBaseValue())},getBaseValue:function(){var t=this,e=t.min,n=t.max;return t.beginAtZero?0:e<0&&n<0?n:e>0&&n>0?e:0},_autoSkip:function(t){var e,n,i=this,a=i.isHorizontal(),o=i.options.ticks.minor,r=t.length,s=!1,l=o.maxTicksLimit,d=i._tickSize()*(r-1),u=a?i.width-(i.paddingLeft+i.paddingRight):i.height-(i.paddingTop+i.PaddingBottom),h=[];for(d>u&&(s=1+Math.floor(d/u)),r>l&&(s=Math.max(s,1+Math.floor(r/l))),e=0;e<r;e++)n=t[e],s>1&&e%s>0&&delete n.label,h.push(n);return h},_tickSize:function(){var t=this,e=t.isHorizontal(),n=t.options.ticks.minor,i=zn.toRadians(t.labelRotation),a=Math.abs(Math.cos(i)),o=Math.abs(Math.sin(i)),r=n.autoSkipPadding||0,s=t.longestLabelWidth+r||0,l=zn.options._parseFont(n),d=t._maxLabelLines*l.lineHeight+r||0;return e?d*a>s*o?s/a:d/o:d*o<s*a?d/a:s/o},_isVisible:function(){var t,e,n,i=this,a=i.chart,o=i.options.display;if("auto"!==o)return!!o;for(t=0,e=a.data.datasets.length;t<e;++t)if(a.isDatasetVisible(t)&&(n=a.getDatasetMeta(t),n.xAxisID===i.id||n.yAxisID===i.id))return!0;return!1},draw:function(t){var e=this,n=e.options;if(e._isVisible()){var i,a,o,r=e.chart,s=e.ctx,l=Ln.global,d=l.defaultFontColor,u=n.ticks.minor,h=n.ticks.major||u,c=n.gridLines,f=n.scaleLabel,g=n.position,p=0!==e.labelRotation,m=u.mirror,v=e.isHorizontal(),b=zn.options._parseFont,x=u.display&&u.autoSkip?e._autoSkip(e.getTicks()):e.getTicks(),y=la(u.fontColor,d),k=b(u),w=k.lineHeight,M=la(h.fontColor,d),_=b(h),C=u.padding,S=u.labelOffset,P=c.drawTicks?c.tickMarkLength:0,I=la(f.fontColor,d),A=b(f),D=zn.options.toPadding(f.padding),T=zn.toRadians(e.labelRotation),F=[],L=c.drawBorder?da(c.lineWidth,0,0):0,R=zn._alignPixel;
"top"===g?(i=R(r,e.bottom,L),a=e.bottom-P,o=i-L/2):"bottom"===g?(i=R(r,e.top,L),a=i+L/2,o=e.top+P):"left"===g?(i=R(r,e.right,L),a=e.right-P,o=i-L/2):(i=R(r,e.left,L),a=i+L/2,o=e.left+P);var O=1e-7;if(zn.each(x,function(i,s){if(!zn.isNullOrUndef(i.label)){var l,d,u,h,f=i.label;s===e.zeroLineIndex&&n.offset===c.offsetGridLines?(l=c.zeroLineWidth,d=c.zeroLineColor,u=c.zeroLineBorderDash||[],h=c.zeroLineBorderDashOffset||0):(l=da(c.lineWidth,s),d=da(c.color,s),u=c.borderDash||[],h=c.borderDashOffset||0);var b,x,y,k,M,_,I,A,D,z,B,N,W=zn.isArray(f)?f.length:1,V=me(e,s,c.offsetGridLines);if(v){var E=P+C;V<e.left-O&&(d="rgba(0,0,0,0)"),b=y=M=I=R(r,V,l),x=a,k=o,D=e.getPixelForTick(s)+S,"top"===g?(_=R(r,t.top,L)+L/2,A=t.bottom,B=((p?1:.5)-W)*w,N=p?"left":"center",z=e.bottom-E):(_=t.top,A=R(r,t.bottom,L)-L/2,B=(p?0:.5)*w,N=p?"right":"center",z=e.top+E)}else{var H=(m?0:P)+C;V<e.top-O&&(d="rgba(0,0,0,0)"),b=a,y=o,x=k=_=A=R(r,V,l),z=e.getPixelForTick(s)+S,B=(1-W)*w/2,"left"===g?(M=R(r,t.left,L)+L/2,I=t.right,N=m?"left":"right",D=e.right-H):(M=t.left,I=R(r,t.right,L)-L/2,N=m?"right":"left",D=e.left+H)}F.push({tx1:b,ty1:x,tx2:y,ty2:k,x1:M,y1:_,x2:I,y2:A,labelX:D,labelY:z,glWidth:l,glColor:d,glBorderDash:u,glBorderDashOffset:h,rotation:-1*T,label:f,major:i.major,textOffset:B,textAlign:N})}}),zn.each(F,function(t){var e=t.glWidth,n=t.glColor;if(c.display&&e&&n&&(s.save(),s.lineWidth=e,s.strokeStyle=n,s.setLineDash&&(s.setLineDash(t.glBorderDash),s.lineDashOffset=t.glBorderDashOffset),s.beginPath(),c.drawTicks&&(s.moveTo(t.tx1,t.ty1),s.lineTo(t.tx2,t.ty2)),c.drawOnChartArea&&(s.moveTo(t.x1,t.y1),s.lineTo(t.x2,t.y2)),s.stroke(),s.restore()),u.display){s.save(),s.translate(t.labelX,t.labelY),s.rotate(t.rotation),s.font=t.major?_.string:k.string,s.fillStyle=t.major?M:y,s.textBaseline="middle",s.textAlign=t.textAlign;var i=t.label,a=t.textOffset;if(zn.isArray(i))for(var o=0;o<i.length;++o)s.fillText(""+i[o],0,a),a+=w;else s.fillText(i,0,a);s.restore()}}),f.display){var z,B,N=0,W=A.lineHeight/2;if(v)z=e.left+(e.right-e.left)/2,B="bottom"===g?e.bottom-W-D.bottom:e.top+W+D.top;else{var V="left"===g;z=V?e.left+W+D.top:e.right-W-D.top,B=e.top+(e.bottom-e.top)/2,N=V?-.5*Math.PI:.5*Math.PI}s.save(),s.translate(z,B),s.rotate(N),s.textAlign="center",s.textBaseline="middle",s.fillStyle=I,s.font=A.string,s.fillText(f.labelString,0,0),s.restore()}if(L){var E,H,j,q,Y=L,U=da(c.lineWidth,x.length-1,0);v?(E=R(r,e.left,Y)-Y/2,H=R(r,e.right,U)+U/2,j=q=i):(j=R(r,e.top,Y)-Y/2,q=R(r,e.bottom,U)+U/2,E=H=i),s.lineWidth=L,s.strokeStyle=da(c.color,0),s.beginPath(),s.moveTo(E,j),s.lineTo(H,q),s.stroke()}}}}),ha={position:"bottom"},ca=ua.extend({getLabels:function(){var t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels},determineDataLimits:function(){var t=this,e=t.getLabels();t.minIndex=0,t.maxIndex=e.length-1;var n;void 0!==t.options.ticks.min&&(n=e.indexOf(t.options.ticks.min),t.minIndex=n!==-1?n:t.minIndex),void 0!==t.options.ticks.max&&(n=e.indexOf(t.options.ticks.max),t.maxIndex=n!==-1?n:t.maxIndex),t.min=e[t.minIndex],t.max=e[t.maxIndex]},buildTicks:function(){var t=this,e=t.getLabels();t.ticks=0===t.minIndex&&t.maxIndex===e.length-1?e:e.slice(t.minIndex,t.maxIndex+1)},getLabelForIndex:function(t,e){var n=this,i=n.chart;return i.getDatasetMeta(e).controller._getValueScaleId()===n.id?n.getRightValue(i.data.datasets[e].data[t]):n.ticks[t-n.minIndex]},getPixelForValue:function(t,e){var n,i=this,a=i.options.offset,o=Math.max(i.maxIndex+1-i.minIndex-(a?0:1),1);if(void 0!==t&&null!==t&&(n=i.isHorizontal()?t.x:t.y),void 0!==n||void 0!==t&&isNaN(e)){var r=i.getLabels();t=n||t;var s=r.indexOf(t);e=s!==-1?s:e}if(i.isHorizontal()){var l=i.width/o,d=l*(e-i.minIndex);return a&&(d+=l/2),i.left+d}var u=i.height/o,h=u*(e-i.minIndex);return a&&(h+=u/2),i.top+h},getPixelForTick:function(t){return this.getPixelForValue(this.ticks[t],t+this.minIndex,null)},getValueForPixel:function(t){var e,n=this,i=n.options.offset,a=Math.max(n._ticks.length-(i?0:1),1),o=n.isHorizontal(),r=(o?n.width:n.height)/a;return t-=o?n.left:n.top,i&&(t-=r/2),e=t<=0?0:Math.round(t/r),e+n.minIndex},getBasePixel:function(){return this.bottom}}),fa=ha;ca._defaults=fa;var ga=zn.noop,pa=zn.isNullOrUndef,ma=ua.extend({getRightValue:function(t){return"string"==typeof t?+t:ua.prototype.getRightValue.call(this,t)},handleTickRangeOptions:function(){var t=this,e=t.options,n=e.ticks;if(n.beginAtZero){var i=zn.sign(t.min),a=zn.sign(t.max);i<0&&a<0?t.max=0:i>0&&a>0&&(t.min=0)}var o=void 0!==n.min||void 0!==n.suggestedMin,r=void 0!==n.max||void 0!==n.suggestedMax;void 0!==n.min?t.min=n.min:void 0!==n.suggestedMin&&(null===t.min?t.min=n.suggestedMin:t.min=Math.min(t.min,n.suggestedMin)),void 0!==n.max?t.max=n.max:void 0!==n.suggestedMax&&(null===t.max?t.max=n.suggestedMax:t.max=Math.max(t.max,n.suggestedMax)),o!==r&&t.min>=t.max&&(o?t.max=t.min+1:t.min=t.max-1),t.min===t.max&&(t.max++,n.beginAtZero||t.min--)},getTickLimit:function(){var t,e=this,n=e.options.ticks,i=n.stepSize,a=n.maxTicksLimit;return i?t=Math.ceil(e.max/i)-Math.floor(e.min/i)+1:(t=e._computeTickLimit(),a=a||11),a&&(t=Math.min(a,t)),t},_computeTickLimit:function(){return Number.POSITIVE_INFINITY},handleDirectionalChanges:ga,buildTicks:function(){var t=this,e=t.options,n=e.ticks,i=t.getTickLimit();i=Math.max(2,i);var a={maxTicks:i,min:n.min,max:n.max,precision:n.precision,stepSize:zn.valueOrDefault(n.fixedStepSize,n.stepSize)},o=t.ticks=be(a,t);t.handleDirectionalChanges(),t.max=zn.max(o),t.min=zn.min(o),n.reverse?(o.reverse(),t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max)},convertTicksToLabels:function(){var t=this;t.ticksAsNumbers=t.ticks.slice(),t.zeroLineIndex=t.ticks.indexOf(0),ua.prototype.convertTicksToLabels.call(t)}}),va={position:"left",ticks:{callback:sa.formatters.linear}},ba=ma.extend({determineDataLimits:function(){function t(t){return r?t.xAxisID===e.id:t.yAxisID===e.id}var e=this,n=e.options,i=e.chart,a=i.data,o=a.datasets,r=e.isHorizontal(),s=0,l=1;e.min=null,e.max=null;var d=n.stacked;if(void 0===d&&zn.each(o,function(e,n){if(!d){var a=i.getDatasetMeta(n);i.isDatasetVisible(n)&&t(a)&&void 0!==a.stack&&(d=!0)}}),n.stacked||d){var u={};zn.each(o,function(a,o){var r=i.getDatasetMeta(o),s=[r.type,void 0===n.stacked&&void 0===r.stack?o:"",r.stack].join(".");void 0===u[s]&&(u[s]={positiveValues:[],negativeValues:[]});var l=u[s].positiveValues,d=u[s].negativeValues;i.isDatasetVisible(o)&&t(r)&&zn.each(a.data,function(t,i){var a=+e.getRightValue(t);isNaN(a)||r.data[i].hidden||(l[i]=l[i]||0,d[i]=d[i]||0,n.relativePoints?l[i]=100:a<0?d[i]+=a:l[i]+=a)})}),zn.each(u,function(t){var n=t.positiveValues.concat(t.negativeValues),i=zn.min(n),a=zn.max(n);e.min=null===e.min?i:Math.min(e.min,i),e.max=null===e.max?a:Math.max(e.max,a)})}else zn.each(o,function(n,a){var o=i.getDatasetMeta(a);i.isDatasetVisible(a)&&t(o)&&zn.each(n.data,function(t,n){var i=+e.getRightValue(t);isNaN(i)||o.data[n].hidden||(null===e.min?e.min=i:i<e.min&&(e.min=i),null===e.max?e.max=i:i>e.max&&(e.max=i))})});e.min=isFinite(e.min)&&!isNaN(e.min)?e.min:s,e.max=isFinite(e.max)&&!isNaN(e.max)?e.max:l,this.handleTickRangeOptions()},_computeTickLimit:function(){var t,e=this;return e.isHorizontal()?Math.ceil(e.width/40):(t=zn.options._parseFont(e.options.ticks),Math.ceil(e.height/t.lineHeight))},handleDirectionalChanges:function(){this.isHorizontal()||this.ticks.reverse()},getLabelForIndex:function(t,e){return+this.getRightValue(this.chart.data.datasets[e].data[t])},getPixelForValue:function(t){var e,n=this,i=n.start,a=+n.getRightValue(t),o=n.end-i;return e=n.isHorizontal()?n.left+n.width/o*(a-i):n.bottom-n.height/o*(a-i)},getValueForPixel:function(t){var e=this,n=e.isHorizontal(),i=n?e.width:e.height,a=(n?t-e.left:e.bottom-t)/i;return e.start+(e.end-e.start)*a},getPixelForTick:function(t){return this.getPixelForValue(this.ticksAsNumbers[t])}}),xa=va;ba._defaults=xa;var ya=zn.valueOrDefault,ka={position:"left",ticks:{callback:sa.formatters.logarithmic}},wa=ua.extend({determineDataLimits:function(){function t(t){return r?t.xAxisID===e.id:t.yAxisID===e.id}var e=this,n=e.options,i=e.chart,a=i.data,o=a.datasets,r=e.isHorizontal();e.min=null,e.max=null,e.minNotZero=null;var s=n.stacked;if(void 0===s&&zn.each(o,function(e,n){if(!s){var a=i.getDatasetMeta(n);i.isDatasetVisible(n)&&t(a)&&void 0!==a.stack&&(s=!0)}}),n.stacked||s){var l={};zn.each(o,function(a,o){var r=i.getDatasetMeta(o),s=[r.type,void 0===n.stacked&&void 0===r.stack?o:"",r.stack].join(".");i.isDatasetVisible(o)&&t(r)&&(void 0===l[s]&&(l[s]=[]),zn.each(a.data,function(t,n){var i=l[s],a=+e.getRightValue(t);isNaN(a)||r.data[n].hidden||a<0||(i[n]=i[n]||0,i[n]+=a)}))}),zn.each(l,function(t){if(t.length>0){var n=zn.min(t),i=zn.max(t);e.min=null===e.min?n:Math.min(e.min,n),e.max=null===e.max?i:Math.max(e.max,i)}})}else zn.each(o,function(n,a){var o=i.getDatasetMeta(a);i.isDatasetVisible(a)&&t(o)&&zn.each(n.data,function(t,n){var i=+e.getRightValue(t);isNaN(i)||o.data[n].hidden||i<0||(null===e.min?e.min=i:i<e.min&&(e.min=i),null===e.max?e.max=i:i>e.max&&(e.max=i),0!==i&&(null===e.minNotZero||i<e.minNotZero)&&(e.minNotZero=i))})});this.handleTickRangeOptions()},handleTickRangeOptions:function(){var t=this,e=t.options.ticks,n=1,i=10;t.min=ye(e.min,t.min),t.max=ye(e.max,t.max),t.min===t.max&&(0!==t.min&&null!==t.min?(t.min=Math.pow(10,Math.floor(zn.log10(t.min))-1),t.max=Math.pow(10,Math.floor(zn.log10(t.max))+1)):(t.min=n,t.max=i)),null===t.min&&(t.min=Math.pow(10,Math.floor(zn.log10(t.max))-1)),null===t.max&&(t.max=0!==t.min?Math.pow(10,Math.floor(zn.log10(t.min))+1):i),null===t.minNotZero&&(t.min>0?t.minNotZero=t.min:t.max<1?t.minNotZero=Math.pow(10,Math.floor(zn.log10(t.max))):t.minNotZero=n)},buildTicks:function(){var t=this,e=t.options.ticks,n=!t.isHorizontal(),i={min:ye(e.min),max:ye(e.max)},a=t.ticks=xe(i,t);t.max=zn.max(a),t.min=zn.min(a),e.reverse?(n=!n,t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max),n&&a.reverse()},convertTicksToLabels:function(){this.tickValues=this.ticks.slice(),ua.prototype.convertTicksToLabels.call(this)},getLabelForIndex:function(t,e){return+this.getRightValue(this.chart.data.datasets[e].data[t])},getPixelForTick:function(t){return this.getPixelForValue(this.tickValues[t])},_getFirstTickValue:function(t){var e=Math.floor(zn.log10(t)),n=Math.floor(t/Math.pow(10,e));return n*Math.pow(10,e)},getPixelForValue:function(t){var e,n,i,a,o,r=this,s=r.options.ticks,l=s.reverse,d=zn.log10,u=r._getFirstTickValue(r.minNotZero),h=0;return t=+r.getRightValue(t),l?(i=r.end,a=r.start,o=-1):(i=r.start,a=r.end,o=1),r.isHorizontal()?(e=r.width,n=l?r.right:r.left):(e=r.height,o*=-1,n=l?r.top:r.bottom),t!==i&&(0===i&&(h=ya(s.fontSize,Ln.global.defaultFontSize),e-=h,i=u),0!==t&&(h+=e/(d(a)-d(i))*(d(t)-d(i))),n+=o*h),n},getValueForPixel:function(t){var e,n,i,a,o=this,r=o.options.ticks,s=r.reverse,l=zn.log10,d=o._getFirstTickValue(o.minNotZero);if(s?(n=o.end,i=o.start):(n=o.start,i=o.end),o.isHorizontal()?(e=o.width,a=s?o.right-t:t-o.left):(e=o.height,a=s?t-o.top:o.bottom-t),a!==n){if(0===n){var u=ya(r.fontSize,Ln.global.defaultFontSize);a-=u,e-=u,n=d}a*=l(i)-l(n),a/=e,a=Math.pow(10,l(n)+a)}return a}}),Ma=ka;wa._defaults=Ma;var _a=zn.valueOrDefault,Ca=zn.valueAtIndexOrDefault,Sa=zn.options.resolve,Pa={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1,borderDash:[],borderDashOffset:0},gridLines:{circular:!1},ticks:{showLabelBackdrop:!0,backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2,callback:sa.formatters.linear},pointLabels:{display:!0,fontSize:10,callback:function(t){return t}}},Ia=ma.extend({setDimensions:function(){var t=this;t.width=t.maxWidth,t.height=t.maxHeight,t.paddingTop=we(t.options)/2,t.xCenter=Math.floor(t.width/2),t.yCenter=Math.floor((t.height-t.paddingTop)/2),t.drawingArea=Math.min(t.height-t.paddingTop,t.width)/2},determineDataLimits:function(){var t=this,e=t.chart,n=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;zn.each(e.data.datasets,function(a,o){if(e.isDatasetVisible(o)){var r=e.getDatasetMeta(o);zn.each(a.data,function(e,a){var o=+t.getRightValue(e);isNaN(o)||r.data[a].hidden||(n=Math.min(o,n),i=Math.max(o,i))})}}),t.min=n===Number.POSITIVE_INFINITY?0:n,t.max=i===Number.NEGATIVE_INFINITY?0:i,t.handleTickRangeOptions()},_computeTickLimit:function(){return Math.ceil(this.drawingArea/we(this.options))},convertTicksToLabels:function(){var t=this;ma.prototype.convertTicksToLabels.call(t),t.pointLabels=t.chart.data.labels.map(t.options.pointLabels.callback,t)},getLabelForIndex:function(t,e){return+this.getRightValue(this.chart.data.datasets[e].data[t])},fit:function(){var t=this,e=t.options;e.display&&e.pointLabels.display?Ce(t):t.setCenterPoint(0,0,0,0)},setReductions:function(t,e,n){var i=this,a=e.l/Math.sin(n.l),o=Math.max(e.r-i.width,0)/Math.sin(n.r),r=-e.t/Math.cos(n.t),s=-Math.max(e.b-(i.height-i.paddingTop),0)/Math.cos(n.b);a=Te(a),o=Te(o),r=Te(r),s=Te(s),i.drawingArea=Math.min(Math.floor(t-(a+o)/2),Math.floor(t-(r+s)/2)),i.setCenterPoint(a,o,r,s)},setCenterPoint:function(t,e,n,i){var a=this,o=a.width-e-a.drawingArea,r=t+a.drawingArea,s=n+a.drawingArea,l=a.height-a.paddingTop-i-a.drawingArea;a.xCenter=Math.floor((r+o)/2+a.left),a.yCenter=Math.floor((s+l)/2+a.top+a.paddingTop)},getIndexAngle:function(t){var e=2*Math.PI/ke(this),n=this.chart.options&&this.chart.options.startAngle?this.chart.options.startAngle:0,i=n*Math.PI*2/360;return t*e+i},getDistanceFromCenterForValue:function(t){var e=this;if(null===t)return 0;var n=e.drawingArea/(e.max-e.min);return e.options.ticks.reverse?(e.max-t)*n:(t-e.min)*n},getPointPosition:function(t,e){var n=this,i=n.getIndexAngle(t)-Math.PI/2;return{x:Math.cos(i)*e+n.xCenter,y:Math.sin(i)*e+n.yCenter}},getPointPositionForValue:function(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))},getBasePosition:function(){var t=this,e=t.min,n=t.max;return t.getPointPositionForValue(0,t.beginAtZero?0:e<0&&n<0?n:e>0&&n>0?e:0)},draw:function(){var t=this,e=t.options,n=e.gridLines,i=e.ticks;if(e.display){var a=t.ctx,o=this.getIndexAngle(0),r=zn.options._parseFont(i);(e.angleLines.display||e.pointLabels.display)&&Ae(t),zn.each(t.ticks,function(e,s){if(s>0||i.reverse){var l=t.getDistanceFromCenterForValue(t.ticksAsNumbers[s]);if(n.display&&0!==s&&De(t,n,l,s),i.display){var d=_a(i.fontColor,Ln.global.defaultFontColor);if(a.font=r.string,a.save(),a.translate(t.xCenter,t.yCenter),a.rotate(o),i.showLabelBackdrop){var u=a.measureText(e).width;a.fillStyle=i.backdropColor,a.fillRect(-u/2-i.backdropPaddingX,-l-r.size/2-i.backdropPaddingY,u+2*i.backdropPaddingX,r.size+2*i.backdropPaddingY)}a.textAlign="center",a.textBaseline="middle",a.fillStyle=d,a.fillText(e,0,-l),a.restore()}}})}}}),Aa=Pa;Ia._defaults=Aa;var Da=zn.valueOrDefault,Ta=Number.MIN_SAFE_INTEGER||-9007199254740991,Fa=Number.MAX_SAFE_INTEGER||9007199254740991,La={millisecond:{common:!0,size:1,steps:[1,2,5,10,20,50,100,250,500]},second:{common:!0,size:1e3,steps:[1,2,5,10,15,30]},minute:{common:!0,size:6e4,steps:[1,2,5,10,15,30]},hour:{common:!0,size:36e5,steps:[1,2,3,6,12]},day:{common:!0,size:864e5,steps:[1,2,5]},week:{common:!1,size:6048e5,steps:[1,2,3,4]},month:{common:!0,size:2628e6,steps:[1,2,3]},quarter:{common:!1,size:7884e6,steps:[1,2,3,4]},year:{common:!0,size:3154e7}},Ra=Object.keys(La),Oa={position:"bottom",distribution:"linear",bounds:"data",adapters:{},time:{parser:!1,format:!1,unit:!1,round:!1,displayFormat:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{autoSkip:!1,source:"auto",major:{enabled:!1}}},za=ua.extend({initialize:function(){this.mergeTicksOptions(),ua.prototype.initialize.call(this)},update:function(){var t=this,e=t.options,n=e.time||(e.time={}),i=t._adapter=new ra._date(e.adapters.date);return n.format&&console.warn("options.time.format is deprecated and replaced by options.time.parser."),zn.mergeIf(n.displayFormats,i.formats()),ua.prototype.update.apply(t,arguments)},getRightValue:function(t){return t&&void 0!==t.t&&(t=t.t),ua.prototype.getRightValue.call(this,t)},determineDataLimits:function(){var t,e,n,i,a,o,r=this,s=r.chart,l=r._adapter,d=r.options.time,u=d.unit||"day",h=Fa,c=Ta,f=[],g=[],p=[],m=s.data.labels||[];for(t=0,n=m.length;t<n;++t)p.push(Ne(r,m[t]));for(t=0,n=(s.data.datasets||[]).length;t<n;++t)if(s.isDatasetVisible(t))if(a=s.data.datasets[t].data,zn.isObject(a[0]))for(g[t]=[],e=0,i=a.length;e<i;++e)o=Ne(r,a[e]),f.push(o),g[t][e]=o;else{for(e=0,i=p.length;e<i;++e)f.push(p[e]);g[t]=p.slice(0)}else g[t]=[];p.length&&(p=Le(p).sort(Fe),h=Math.min(h,p[0]),c=Math.max(c,p[p.length-1])),f.length&&(f=Le(f).sort(Fe),h=Math.min(h,f[0]),c=Math.max(c,f[f.length-1])),h=Ne(r,d.min)||h,c=Ne(r,d.max)||c,h=h===Fa?+l.startOf(Date.now(),u):h,c=c===Ta?+l.endOf(Date.now(),u)+1:c,r.min=Math.min(h,c),r.max=Math.max(h+1,c),r._horizontal=r.isHorizontal(),r._table=[],r._timestamps={data:f,datasets:g,labels:p}},buildTicks:function(){var t,e,n,i=this,a=i.min,o=i.max,r=i.options,s=r.time,l=[],d=[];switch(r.ticks.source){case"data":l=i._timestamps.data;break;case"labels":l=i._timestamps.labels;break;case"auto":default:l=je(i,a,o,i.getLabelCapacity(a),r)}for("ticks"===r.bounds&&l.length&&(a=l[0],o=l[l.length-1]),a=Ne(i,s.min)||a,o=Ne(i,s.max)||o,t=0,e=l.length;t<e;++t)n=l[t],n>=a&&n<=o&&d.push(n);return i.min=a,i.max=o,i._unit=s.unit||Ee(i,d,s.minUnit,i.min,i.max),i._majorUnit=He(i._unit),i._table=Re(i._timestamps.data,a,o,r.distribution),i._offsets=qe(i._table,d,a,o,r),r.ticks.reverse&&d.reverse(),Ye(i,d,i._majorUnit)},getLabelForIndex:function(t,e){var n=this,i=n._adapter,a=n.chart.data,o=n.options.time,r=a.labels&&t<a.labels.length?a.labels[t]:"",s=a.datasets[e].data[t];return zn.isObject(s)&&(r=n.getRightValue(s)),o.tooltipFormat?i.format(Be(n,r),o.tooltipFormat):"string"==typeof r?r:i.format(Be(n,r),o.displayFormats.datetime)},tickFormatFunction:function(t,e,n,i){var a=this,o=a._adapter,r=a.options,s=r.time.displayFormats,l=s[a._unit],d=a._majorUnit,u=s[d],h=+o.startOf(t,d),c=r.ticks.major,f=c.enabled&&d&&u&&t===h,g=o.format(t,i?i:f?u:l),p=f?c:r.ticks.minor,m=Da(p.callback,p.userCallback);return m?m(g,e,n):g},convertTicksToLabels:function(t){var e,n,i=[];for(e=0,n=t.length;e<n;++e)i.push(this.tickFormatFunction(t[e].value,e,t));return i},getPixelForOffset:function(t){var e=this,n=e.options.ticks.reverse,i=e._horizontal?e.width:e.height,a=e._horizontal?n?e.right:e.left:n?e.bottom:e.top,o=ze(e._table,"time",t,"pos"),r=i*(e._offsets.start+o)/(e._offsets.start+1+e._offsets.end);return n?a-r:a+r},getPixelForValue:function(t,e,n){var i=this,a=null;if(void 0!==e&&void 0!==n&&(a=i._timestamps.datasets[n][e]),null===a&&(a=Ne(i,t)),null!==a)return i.getPixelForOffset(a)},getPixelForTick:function(t){var e=this.getTicks();return t>=0&&t<e.length?this.getPixelForOffset(e[t].value):null},getValueForPixel:function(t){var e=this,n=e._horizontal?e.width:e.height,i=e._horizontal?e.left:e.top,a=(n?(t-i)/n:0)*(e._offsets.start+1+e._offsets.start)-e._offsets.end,o=ze(e._table,"pos",a,"time");return e._adapter._create(o)},getLabelWidth:function(t){var e=this,n=e.options.ticks,i=e.ctx.measureText(t).width,a=zn.toRadians(n.maxRotation),o=Math.cos(a),r=Math.sin(a),s=Da(n.fontSize,Ln.global.defaultFontSize);return i*o+s*r},getLabelCapacity:function(t){var e=this,n=e.options.time.displayFormats.millisecond,i=e.tickFormatFunction(t,0,[],n),a=e.getLabelWidth(i),o=e.isHorizontal()?e.width:e.height,r=Math.floor(o/a);return r>0?r:1}}),Ba=Oa;za._defaults=Ba;var Na={category:ca,linear:ba,logarithmic:wa,radialLinear:Ia,time:za},Wa={datetime:"MMM D, YYYY, h:mm:ss a",millisecond:"h:mm:ss.SSS a",second:"h:mm:ss a",minute:"h:mm a",hour:"hA",day:"MMM D",week:"ll",month:"MMM YYYY",quarter:"[Q]Q - YYYY",year:"YYYY"};ra._date.override("function"==typeof t?{_id:"moment",formats:function(){return Wa},parse:function(e,n){return"string"==typeof e&&"string"==typeof n?e=t(e,n):e instanceof t||(e=t(e)),e.isValid()?e.valueOf():null},format:function(e,n){return t(e).format(n)},add:function(e,n,i){return t(e).add(n,i).valueOf()},diff:function(e,n,i){return t.duration(t(e).diff(t(n))).as(i)},startOf:function(e,n,i){return e=t(e),"isoWeek"===n?e.isoWeekday(i).valueOf():e.startOf(n).valueOf()},endOf:function(e,n){return t(e).endOf(n).valueOf()},_create:function(e){return t(e)}}:{}),Ln._set("global",{plugins:{filler:{propagate:!0}}});var Va={dataset:function(t){var e=t.fill,n=t.chart,i=n.getDatasetMeta(e),a=i&&n.isDatasetVisible(e),o=a&&i.dataset._children||[],r=o.length||0;return r?function(t,e){return e<r&&o[e]._view||null}:null},boundary:function(t){var e=t.boundary,n=e?e.x:null,i=e?e.y:null;return function(t){return{x:null===n?t.x:n,y:null===i?t.y:i}}}},Ea={id:"filler",afterDatasetsUpdate:function(t,e){var n,i,a,o,r=(t.data.datasets||[]).length,s=e.propagate,l=[];for(i=0;i<r;++i)n=t.getDatasetMeta(i),a=n.dataset,o=null,a&&a._model&&a instanceof ai.Line&&(o={visible:t.isDatasetVisible(i),fill:Ue(a,i,r),chart:t,el:a}),n.$filler=o,l.push(o);for(i=0;i<r;++i)o=l[i],o&&(o.fill=Ke(l,i,s),o.boundary=Xe(o),o.mapper=Ge(o))},beforeDatasetDraw:function(t,e){var n=e.meta.$filler;if(n){var i=t.ctx,a=n.el,o=a._view,r=a._children||[],s=n.mapper,l=o.backgroundColor||Ln.global.defaultColor;s&&l&&r.length&&(zn.canvas.clipArea(i,t.chartArea),Je(i,r,s,o,l,a._loop),zn.canvas.unclipArea(i))}}},Ha=zn.noop,ja=zn.valueOrDefault;Ln._set("global",{legend:{display:!0,position:"top",fullWidth:!0,reverse:!1,weight:1e3,onClick:function(t,e){var n=e.datasetIndex,i=this.chart,a=i.getDatasetMeta(n);a.hidden=null===a.hidden?!i.data.datasets[n].hidden:null,i.update()},onHover:null,onLeave:null,labels:{boxWidth:40,padding:10,generateLabels:function(t){var e=t.data;return zn.isArray(e.datasets)?e.datasets.map(function(e,n){return{text:e.label,fillStyle:zn.isArray(e.backgroundColor)?e.backgroundColor[0]:e.backgroundColor,hidden:!t.isDatasetVisible(n),lineCap:e.borderCapStyle,lineDash:e.borderDash,lineDashOffset:e.borderDashOffset,lineJoin:e.borderJoinStyle,lineWidth:e.borderWidth,strokeStyle:e.borderColor,pointStyle:e.pointStyle,datasetIndex:n}},this):[]}}},legendCallback:function(t){var e=[];e.push('<ul class="'+t.id+'-legend">');for(var n=0;n<t.data.datasets.length;n++)e.push('<li><span style="background-color:'+t.data.datasets[n].backgroundColor+'"></span>'),t.data.datasets[n].label&&e.push(t.data.datasets[n].label),e.push("</li>");return e.push("</ul>"),e.join("")}});var qa=En.extend({initialize:function(t){zn.extend(this,t),this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1},beforeUpdate:Ha,update:function(t,e,n){var i=this;return i.beforeUpdate(),i.maxWidth=t,i.maxHeight=e,i.margins=n,i.beforeSetDimensions(),i.setDimensions(),i.afterSetDimensions(),i.beforeBuildLabels(),i.buildLabels(),i.afterBuildLabels(),i.beforeFit(),i.fit(),i.afterFit(),i.afterUpdate(),i.minSize},afterUpdate:Ha,beforeSetDimensions:Ha,setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.minSize={width:0,height:0}},afterSetDimensions:Ha,beforeBuildLabels:Ha,buildLabels:function(){var t=this,e=t.options.labels||{},n=zn.callback(e.generateLabels,[t.chart],t)||[];e.filter&&(n=n.filter(function(n){return e.filter(n,t.chart.data)})),t.options.reverse&&n.reverse(),t.legendItems=n},afterBuildLabels:Ha,beforeFit:Ha,fit:function(){var t=this,e=t.options,n=e.labels,i=e.display,a=t.ctx,o=zn.options._parseFont(n),r=o.size,s=t.legendHitBoxes=[],l=t.minSize,d=t.isHorizontal();if(d?(l.width=t.maxWidth,l.height=i?10:0):(l.width=i?10:0,l.height=t.maxHeight),i)if(a.font=o.string,d){var u=t.lineWidths=[0],h=0;a.textAlign="left",a.textBaseline="top",zn.each(t.legendItems,function(t,e){var i=Qe(n,r),o=i+r/2+a.measureText(t.text).width;(0===e||u[u.length-1]+o+n.padding>l.width)&&(h+=r+n.padding,u[u.length-(e>0?0:1)]=n.padding),s[e]={left:0,top:0,width:o,height:r},u[u.length-1]+=o+n.padding}),l.height+=h}else{var c=n.padding,f=t.columnWidths=[],g=n.padding,p=0,m=0,v=r+c;zn.each(t.legendItems,function(t,e){var i=Qe(n,r),o=i+r/2+a.measureText(t.text).width;e>0&&m+v>l.height-c&&(g+=p+n.padding,f.push(p),p=0,m=0),p=Math.max(p,o),m+=v,s[e]={left:0,top:0,width:o,height:r}}),g+=p,f.push(p),l.width+=g}t.width=l.width,t.height=l.height},afterFit:Ha,isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},draw:function(){var t=this,e=t.options,n=e.labels,i=Ln.global,a=i.defaultColor,o=i.elements.line,r=t.width,s=t.lineWidths;if(e.display){var l,d=t.ctx,u=ja(n.fontColor,i.defaultFontColor),h=zn.options._parseFont(n),c=h.size;d.textAlign="left",d.textBaseline="middle",d.lineWidth=.5,d.strokeStyle=u,d.fillStyle=u,d.font=h.string;var f=Qe(n,c),g=t.legendHitBoxes,p=function(t,n,i){if(!(isNaN(f)||f<=0)){d.save();var r=ja(i.lineWidth,o.borderWidth);if(d.fillStyle=ja(i.fillStyle,a),d.lineCap=ja(i.lineCap,o.borderCapStyle),d.lineDashOffset=ja(i.lineDashOffset,o.borderDashOffset),d.lineJoin=ja(i.lineJoin,o.borderJoinStyle),d.lineWidth=r,d.strokeStyle=ja(i.strokeStyle,a),d.setLineDash&&d.setLineDash(ja(i.lineDash,o.borderDash)),e.labels&&e.labels.usePointStyle){var s=f*Math.SQRT2/2,l=t+f/2,u=n+c/2;zn.canvas.drawPoint(d,i.pointStyle,s,l,u)}else 0!==r&&d.strokeRect(t,n,f,c),d.fillRect(t,n,f,c);d.restore()}},m=function(t,e,n,i){var a=c/2,o=f+a+t,r=e+a;d.fillText(n.text,o,r),n.hidden&&(d.beginPath(),d.lineWidth=2,d.moveTo(o,r),d.lineTo(o+i,r),d.stroke())},v=t.isHorizontal();l=v?{x:t.left+(r-s[0])/2+n.padding,y:t.top+n.padding,line:0}:{x:t.left+n.padding,y:t.top+n.padding,line:0};var b=c+n.padding;zn.each(t.legendItems,function(e,i){var a=d.measureText(e.text).width,o=f+c/2+a,u=l.x,h=l.y;v?i>0&&u+o+n.padding>t.left+t.minSize.width&&(h=l.y+=b,l.line++,u=l.x=t.left+(r-s[l.line])/2+n.padding):i>0&&h+b>t.top+t.minSize.height&&(u=l.x=u+t.columnWidths[l.line]+n.padding,h=l.y=t.top+n.padding,l.line++),p(u,h,e),g[i].left=u,g[i].top=h,m(u,h,e,a),v?l.x+=o+n.padding:l.y+=b})}},_getLegendItemAt:function(t,e){var n,i,a,o=this;if(t>=o.left&&t<=o.right&&e>=o.top&&e<=o.bottom)for(a=o.legendHitBoxes,n=0;n<a.length;++n)if(i=a[n],t>=i.left&&t<=i.left+i.width&&e>=i.top&&e<=i.top+i.height)return o.legendItems[n];return null},handleEvent:function(t){var e,n=this,i=n.options,a="mouseup"===t.type?"click":t.type;if("mousemove"===a){if(!i.onHover&&!i.onLeave)return}else{if("click"!==a)return;if(!i.onClick)return}e=n._getLegendItemAt(t.x,t.y),"click"===a?e&&i.onClick&&i.onClick.call(n,t["native"],e):(i.onLeave&&e!==n._hoveredItem&&(n._hoveredItem&&i.onLeave.call(n,t["native"],n._hoveredItem),n._hoveredItem=e),i.onHover&&e&&i.onHover.call(n,t["native"],e))}}),Ya={id:"legend",_element:qa,beforeInit:function(t){var e=t.options.legend;e&&tn(t,e)},beforeUpdate:function(t){var e=t.options.legend,n=t.legend;e?(zn.mergeIf(e,Ln.global.legend),n?(Ti.configure(t,n,e),n.options=e):tn(t,e)):n&&(Ti.removeBox(t,n),delete t.legend)},afterEvent:function(t,e){var n=t.legend;n&&n.handleEvent(e)}},Ua=zn.noop;Ln._set("global",{title:{display:!1,fontStyle:"bold",fullWidth:!0,padding:10,position:"top",text:"",weight:2e3}});var Xa=En.extend({initialize:function(t){var e=this;zn.extend(e,t),e.legendHitBoxes=[]},beforeUpdate:Ua,update:function(t,e,n){var i=this;return i.beforeUpdate(),i.maxWidth=t,i.maxHeight=e,i.margins=n,i.beforeSetDimensions(),i.setDimensions(),i.afterSetDimensions(),i.beforeBuildLabels(),i.buildLabels(),i.afterBuildLabels(),i.beforeFit(),i.fit(),i.afterFit(),i.afterUpdate(),i.minSize},afterUpdate:Ua,beforeSetDimensions:Ua,setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.minSize={width:0,height:0}},afterSetDimensions:Ua,beforeBuildLabels:Ua,buildLabels:Ua,afterBuildLabels:Ua,beforeFit:Ua,fit:function(){var t=this,e=t.options,n=e.display,i=t.minSize,a=zn.isArray(e.text)?e.text.length:1,o=zn.options._parseFont(e),r=n?a*o.lineHeight+2*e.padding:0;t.isHorizontal()?(i.width=t.maxWidth,i.height=r):(i.width=r,i.height=t.maxHeight),t.width=i.width,t.height=i.height},afterFit:Ua,isHorizontal:function(){var t=this.options.position;return"top"===t||"bottom"===t},draw:function(){var t=this,e=t.ctx,n=t.options;if(n.display){var i,a,o,r=zn.options._parseFont(n),s=r.lineHeight,l=s/2+n.padding,d=0,u=t.top,h=t.left,c=t.bottom,f=t.right;e.fillStyle=zn.valueOrDefault(n.fontColor,Ln.global.defaultFontColor),e.font=r.string,t.isHorizontal()?(a=h+(f-h)/2,o=u+l,i=f-h):(a="left"===n.position?h+l:f-l,o=u+(c-u)/2,i=c-u,d=Math.PI*("left"===n.position?-.5:.5)),e.save(),e.translate(a,o),e.rotate(d),e.textAlign="center",e.textBaseline="middle";var g=n.text;if(zn.isArray(g))for(var p=0,m=0;m<g.length;++m)e.fillText(g[m],0,p,i),p+=s;else e.fillText(g,0,0,i);e.restore()}}}),Ka={id:"title",_element:Xa,beforeInit:function(t){var e=t.options.title;e&&en(t,e)},beforeUpdate:function(t){var e=t.options.title,n=t.titleBlock;e?(zn.mergeIf(e,Ln.global.title),n?(Ti.configure(t,n,e),n.options=e):en(t,e)):n&&(Ti.removeBox(t,n),delete t.titleBlock)}},Ga={},Za=Ea,$a=Ya,Ja=Ka;Ga.filler=Za,Ga.legend=$a,Ga.title=Ja,ia.helpers=zn,aa(ia),ia._adapters=ra,ia.Animation=jn,ia.animationService=qn,ia.controllers=Ai,ia.DatasetController=Kn,ia.defaults=Ln,ia.Element=En,ia.elements=ai,ia.Interaction=Di,ia.layouts=Ti,ia.platform=Xi,ia.plugins=Ki,ia.Scale=ua,ia.scaleService=Gi,ia.Ticks=sa,ia.Tooltip=ta,ia.helpers.each(Na,function(t,e){ia.scaleService.registerScaleType(e,t,t._defaults)});for(var Qa in Ga)Ga.hasOwnProperty(Qa)&&ia.plugins.register(Ga[Qa]);ia.platform.initialize();var to=ia;return"undefined"!=typeof window&&(window.Chart=ia),ia.Chart=ia,ia.Legend=Ga.legend._element,ia.Title=Ga.title._element,ia.pluginService=ia.plugins,ia.PluginBase=ia.Element.extend({}),ia.canvasHelpers=ia.helpers.canvas,ia.layoutService=ia.layouts,ia.LinearScaleBase=ma,ia.helpers.each(["Bar","Bubble","Doughnut","Line","PolarArea","Radar","Scatter"],function(t){ia[t]=function(e,n){return new ia(e,ia.helpers.merge(n||{},{type:t.charAt(0).toLowerCase()+t.slice(1)}))}}),to});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
