(function(a){var t=function(a){var t=typeof a;return"object"===t&&!!a},n=function(a,n){return t(a)?n?a.x:a.y:a},e=function(a){for(var t=[],n=a.length,e=0;e<n;e++)t.push(a[e]);return t},r=function(a){a.originalData=a.datasets.map(function(a){return e(a.data)})},i=function(a,t,e){var r=a.datasets.map(function(a){if(!a._meta)return!0;for(var t in a._meta)return!a._meta[t].hidden}),i=0;a&&a.datasets&&a.datasets[0]&&a.datasets[0].data&&(i=a.datasets[0].data.length);var o=Array.apply(null,new Array(i)).map(function(e,i){return a.datasets.reduce(function(a,e,o){var c=e.stack;return a[c]||(a[c]=0),a[c]+=n(e.data[i],t)*r[o],a},{})});a.calculatedData=a.datasets.map(function(a,r){return a.data.map(function(r,i){var s=o[i][a.stack],u=n(r,t);return u&&s?c(u/s,e):0})})},o=function(a){var t=1;if(!a.hasOwnProperty("precision"))return t;if(!a.precision)return t;var n=Math.floor(a.precision);return isNaN(n)?t:n<0||n>16?t:n},c=function(a,t){var n=Math.pow(10,t);return Math.round(100*a*n)/n},s=function(a){return function(t,e){var r=t.datasetIndex,i=t.index,o=e.datasets[r].label||"",c=e.originalData[r][i],s=e.calculatedData[r][i];return""+o+": "+s+"% ("+n(c,a)+")"}},u=function(a,t){a&&a.forEach(function(a,n){t[n].data=a})},f=function(a){return"horizontalBar"===a.config.type},d={id:"stacked100",beforeInit:function(a,t){if(t.enable){var n=a.options.scales.xAxes,e=a.options.scales.yAxes,r="bar"===a.config.type||"line"===a.config.type;[n,e].forEach(function(a){a.forEach(function(a){a.stacked=!0})}),(r?e:n).forEach(function(a){a.ticks.min||(a.ticks.min=0),a.ticks.max||(a.ticks.max=100)}),t.hasOwnProperty("replaceTooltipLabel")&&!t.replaceTooltipLabel||(a.options.tooltips.callbacks.label=s(f(a)))}},beforeDatasetsUpdate:function(a,t){if(t.enable){r(a.data);var n=o(t);i(a.data,f(a),n),u(a.data.calculatedData,a.data.datasets)}},afterDatasetsUpdate:function(a,t){t.enable&&u(a.data.originalData,a.data.datasets)}};a.pluginService.register(d)}).call(this,Chart);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
