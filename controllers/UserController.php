<?php
/**
 * Created by PhpStorm.
 * User: Vitaly
 * Date: 18.04.2019
 * Time: 7:52
 */

namespace app\controllers;


use app\models\AddUserByEmail;
use app\models\Card;
use app\models\ChangePassword;
use app\models\myPaypal2;
use app\models\myStripe;
use app\models\Register;
use app\models\StripeSetChange;
use app\models\UploadImage;
use app\models\User;
use app\models\Users;
use function boolval;
use Codeception\Platform\Extension;
use function intval;
use function is_int;
use function json_encode;
use function time;
use const true;
use Yii;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\web\Controller;
use yii\web\ForbiddenHttpException;
use yii\web\UploadedFile;

class UserController extends Controller
{
    public $layout = "user";
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'actions' => ['hello', 'confirm-email','index','users','ajax-checker', 'keys','settings', 'payments','ajax-add-user','ajax-remove-user'],
                        'allow' => true,
                        'roles' => ['ROLE_UNIT'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'ajax-checker' => ['post'],
                    'ajax-add-user' => ['post'],
                    'ajax-remove-user' => ['post'],
                ],
            ],
        ];
}

    /*Окно приветствия после регистрации*/

    public function actionHello($code = null,$error=null){

        if($code){
            $currentUser = Yii::$app->user->identity;
            $currentUser->sendConfirmEmail();
        }else if($error){
            return $this->render("hello",["user"=>Yii::$app->user->identity,"error"=>1]);
        }


        return $this->render("hello",["user"=>Yii::$app->user->identity]);

    }
    /*
     * @param string $code - код активации учетной записи
     * @return вернет рендер activited в случаее успеха
     * перенаправит на user/hello, с ошибкой в случае провала
     * */
    public function actionConfirmEmail($code){
         $currentUser = Yii::$app->user->identity;
         if($currentUser->email_confirm_token==$code and $currentUser->email_confirm_token!="1"){
             $currentUser->IS_ACTIVATED = true;
             $currentUser->email_confirm_token = true;
             $currentUser->update_at = time();
             if($currentUser->save()){
                 return $this->render("activated");
             }else{
                 return $this->redirect(["user/hello","error"=>"1"]);
             }


         }else{
             return $this->redirect(["user/hello","error"=>"1"]);
         }
    }

    /*
     * Обрабатывает главную страницу unit-пользователя. если пользователь не актиен, вылетает 403-я ошибка.
     *
     * */
    public function actionIndex(){
        if(Yii::$app->user->can("ActiveUnitUser", ['active'=>'1'])){
            return $this->render("index");
        }else{
           $this->accessDenied();
        }

    }

    public function actionUsers(){
        if(Yii::$app->user->can("ActiveUnitUser", ['active'=>'1'])){

            $agents = User::find()->where(["parent_unit_id"=>Yii::$app->user->getId()])-> all();

            return $this->render("users", ["agents"=>$agents]);
        }else{
            $this->accessDenied();
        }
    }

    /*
     * Вызывается из шаблона.
     * */
    public function actionAjaxAddUser(){
        if(Yii::$app->user->can("ActiveUnitUser", ['active'=>'1'])){
            $model= new AddUserByEmail();
            $result = [];
            if($model->load(Yii::$app->request->post())){
                if(!$model->addOtherParametres()){
                    $result["errors"]['No_checked'] = "Select \"Face detector\" or \"Emotion recognition\"";
                    return json_encode($result);
                }
                if($model->save() and $model->addAgent()){
                    $result["save"] = "ok";
                }else{
                    foreach ($model->errors as $error=>$value){
                        $result["errors"][$error] = $value[0];
                    }

                }

            }else{


            }
            return json_encode($result);
        }else{
            $this->accessDenied();
        }
    }

    /*
     * Если пользователь вдруг является агентом, то перенаправляем его в личный кабинет.
     * */
    function beforeAction($action)
    {
        $role = Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId());
        if($role["ROLE_AGENT"]){
//            $this->var_export($action);
            $this->redirect("/agent/".$action->id);
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /*
     * Удаляет пользователя (вызывается из users)
     * */
    public function actionAjaxRemoveUser(){
        if(Yii::$app->user->can("ActiveUnitUser", ['active'=>'1'])) {
            $userID = intval(Yii::$app->request->post()['removeUserId']);
            $response = [];
            if(is_int($userID)){
                $user = User::findOne(['id'=>$userID]);
                if($user->parent_unit_id == Yii::$app->user->getId() and $user->id!=Yii::$app->user->getId()){
                    $email = AddUserByEmail::findOne(['email'=>$user->email]);
                    $user->delete();
                    $email->delete();
                    $response["success"]= "The agent has been successfully removed.";
                }else{
                    $response["errors"][] = "You are not a unit of this agent.";
                }

            }else{
                $response["errors"][] = "Sorry an error occurred, please contact support.";

            }
            return json_encode($response);
        }else{
            return $this->accessDenied();
        }
    }

    /*
     * Выводит ошибку о запрещенном доступе.
     * */
    public function accessDenied(){
       throw new ForbiddenHttpException("Access denied, your account is not activated");
    }

    public function actionAjaxChecker(){
        if(Yii::$app->user->can("ActiveUnitUser", ['active'=>'1'])) {
            if ($data = Yii::$app->request->post()) {
                $id = intval($data['id']);
                $agent = Users::findOne($id);
//                $this->var_export($agent->loadData($data));

                if ($agent = Users::findOne($id) and $agent->loadData($data)) {
                    $agent->save();
                    echo "OK";
                } else {
                    return "NOT";
                }


            }
        }else{
            return $this->accessDenied();
        }
    }

    public function actionKeys(){
        if(Yii::$app->user->can("ActiveUnitUser", ['active'=>'1'])) {
            return $this->render("keys");
        }else{
            $this->accessDenied();
        }
    }

    public function actionSettings() {
        if(Yii::$app->user->can("ActiveUnitUser", ['active'=>'1'])){
            $image = new UploadImage();
            $model = new ChangePassword();//Для смены пароля.

            if (Yii::$app->request->isPost){
                if($file = UploadedFile::getInstance($image,'image')){
                    $image->upload($file);
                }

                if($model->load(Yii::$app->request->post())){
                    $model->setPassword();
                }


            }


            return $this->render("settings",["image"=>$image,'changePass'=>$model]);
        }else{
            $this->accessDenied();
        }
    }
    public function actionPayments(){
//        $str = new StripeSetChange();
//        $this->var_export($str->createCard());
        if(Yii::$app->user->can("ActiveUnitUser", ['active'=>'1'])) {
            $card = new Card();

            //Обрабатываем Pjax
            if(Yii::$app->request->isPjax){
                //Обрабатываем загрузку данных карты
                if($card->load(Yii::$app->request->post())){
                    $card->setPayments();
                }

            }

            if($_GET["paypal"]=="1"){
                $paypal = new myPaypal2();
            }

            return $this->render("payments", ["card"=>$card]);
        }else{
            $this->accessDenied();
        }
    }

}