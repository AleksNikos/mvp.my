
syntax = "proto3";

package cul;

message ValidationRequest{
}

message ValidationResult{

}

message GenerateTokenRequest{
    string login = 2; //Некий логин для пользователя
    string email = 3; //email, с ним связываются ключи (некая сущзьность для группирования ключей)
    repeated uint64 restriction_codes = 4; //Числовые кода сервисов, для которых запрашиватеся доступ
    /*
    1	AuthorizationService
    2	FaceDetectionService
    3	SingleFrameEmotionDetectionService
    4	MultiFrameEmotionDetectionService
    5	HeartRateDetectionService
    6	VoiceSeparationService
    7	VoiceEmotionDetectionService
    33	FaceDetectionDemoService
    */

    //набор полей для генерации ключей.
    string country = 5;
    string state = 6;
    string location = 7;
    string company = 8;
}

message GenerateTokenResponse{
    bytes token = 1; //Токен
    bytes server_root_ca = 2; //ROOT CA
    bytes client_key = 3; //CLIENT KEY
    bytes client_cert = 4; //CLIENT CERT
}

//Информация о пользователе
message UserInfo{
    string login = 2;
    string email = 3;
    uint64 user_id = 1; //uid из токена
}

//Информация о токене
message TokenInfo{
    uint64 token_id = 1; //id токена
    uint64 key_id = 5; //id ключа связанного с токеном
    string key_data = 6; //текстовое представление ключа
    string expired = 3; //действителен до
    bool active = 4; //активен или не активен
    repeated string services = 2; //список доступных сервисов
}

message Tokens{
    repeated TokenInfo tokens = 1; //много токенов
}

message UpdateTokenRequest{
    TokenInfo current_token = 1;
    GenerateTokenRequest new_token_info = 2;
}

service AuthService{
    rpc validate_token(ValidationRequest) returns (ValidationResult) {} //Проверка токена (отладочная функция)

    rpc generate_token(GenerateTokenRequest) returns (GenerateTokenResponse) {} //Генерация токена для пользователя

    rpc close_token(TokenInfo) returns (TokenInfo) {} //Отключение токена

    rpc update_token(UpdateTokenRequest) returns (GenerateTokenResponse) {} //Отключение указанного токена, и генерация нового

    rpc user_tokens(UserInfo) returns (Tokens){} //Список токенов пользователя
}