<?php
/**
 * Created by PhpStorm.
 * User: Vitaly
 * Date: 17.05.2019
 * Time: 15:42
 */

namespace app\models;


use function array_push;
use DateTime;
use function intval;
use function json_encode;
use function round;
use function time;
use Yii;
use yii\base\Model;
use yii\web\IdentityInterface;

class StatisticsDays extends Model
{
    public $percentDay;
    public $percentCircle;
    public $graph;


    function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

    }


    /*
     * Получает статистику текущего периода, для текущего пользователя.
     * */
    function getPeriodStatistics(){
        $user = Yii::$app->user->identity;

        $currentDay = date("j", time());
        $currentMoth = date('n', time());
        $currentYear = date('Y', time());
        if($this->curMoth()==12){
            $preMoth = 1;
            $preYear = $this->curYear()-1;
        }else{
            $preMoth=$this->curMoth()-1;
            $preYear=$this->curYear();
        }

        $date = DateTime::createFromFormat("j n Y H:i", $this->curDay().' '.$preMoth.' '.$preYear.' 00:00');

      $curPeriod = $this->getPeriod($date->format("U"),time());
      $oldPeriod = $this->getOldPeriod($date->format("U"),time());

      $new =  'current period: '.date("j n Y", $curPeriod["start"]).' - '.date('j n Y',$curPeriod["finish"]);
      $old = 'old period '.date('j n Y', $oldPeriod["start"]).' - '.date('j n Y',$oldPeriod["finish"]);


      $curStat = $this->getUserStat($user,$curPeriod["start"], $curPeriod["finish"]);
      $oldStat = $this->getUserStat($user,$oldPeriod["start"], $oldPeriod["finish"]);
      $percent = $this->getPercent($curStat,$oldStat);

//      $graph = $this->getGraphStatistics($user, time());//получаем статистику из базы
//      $graphJs = $this->toJsGraphStatistics($graph); //преобразуем полученную статистику в js вид

        $moths = [
            "start"=>[
                "moth"=>date("M",$curPeriod["start"]),
                "day"=>date("d",$curPeriod["start"])
            ],
            "finish"=>[
                "moth"=>date("M",$curPeriod["finish"]),
                "day"=>date("d",$curPeriod["finish"])
            ]
        ];
        $this->graph =  new GraphStatistics();
      $return = ["stats"=>$curStat, "percent"=>$percent, "moths"=>$moths,];
      $this->percentDay = $this->getPercentDay($curPeriod["start"],$curPeriod["finish"],time());
      $this->graph =  new GraphStatistics();
      $this->percentCircle = new CirclePercent(["fdValue"=>$curStat["fd"], "erValue"=>$curStat["er"], "total"=>$curStat["total"]]);
      return $return;
    }

    public function curDay(){
        return date("j", time());
    }

    public function curMoth(){
        return date("n", time());
    }

    public function curYear(){
        return date("n", time());
    }



    function getOldPeriod($startTime, $currentTime){
        $oldMoth = date("n",$currentTime);
        $oldYear = date("Y",$currentTime);
        $oldDay = date("j",$currentTime);
        //возвращаем дату на месяц назад
        if($oldMoth==1){
            $oldMoth=12;
            $oldYear = $oldYear-1;
        }else{
            $oldMoth=$oldMoth-1;
            $oldYear=$oldYear;
        }

        $dateTime = DateTime::createFromFormat("j n Y H:i",$oldDay.' '.$oldMoth.' '.$oldYear.' 00:00');
//        $this->var_export($dateTime->format("j n Y"));
        return $this->getPeriod($startTime,$dateTime->format('U'));

    }


    /*
     * Вернет текущий расчетный период
     *
     * @param unix timestamp $startTime - время начала какого либо события.
     * @param unix timestamp $finishTime - Время конца периода
     *
     * @return array $response
     * start - дата начала рачетного периода (берет день начала события и подставляет ее в расчет текущего периода)
     * finish - не измененная информация тоже самое что и $finishTime
     * */
    function getPeriod($startTime,$finishTime){
        $startDay = date("j",$startTime); // преобразует дату старта в день
        $startMoth = date("n", $finishTime);
        $startYear = date("Y", $finishTime);

        $finishDay = date('j',$finishTime);

        if($finishDay>$startDay){
            $preMoth = $startMoth;
            $preYear = $startYear;
        }
        if($finishDay<$startDay or $startDay==$finishDay){
            if($startMoth==1){
                $preMoth=12;
                $preYear = $startYear-1;
            }else{
                $preMoth=$startMoth-1;
                $preYear=$startYear;
            }
        }

        $dateTime = DateTime::createFromFormat("j n Y H:i",$startDay.' '.$preMoth.' '.$preYear.' 00:00');
//        $response["start"] = $dateTime->format("j n Y");
        $response["start"] = $dateTime->format("U");
        $response["finish"]=$finishTime;
        return $response;
    }

    /*
     * @param IdentityInterface $user - текущий пользователь
     * @param unix time $startDate - дата относительно которой нужно считать статитсику  (т.е. от начала периода до текущей даты)
     * @param unix time $finishDate
     *
     * @return  array $totalStat - общая статистика по использованным ключам.
     * */
    function getUserStat (IdentityInterface $user, $startDate, $finishDate){

        $stats = TotalStatistics::find()->
        where(["userID"=>$user->getId()])-> //статистика самого юзера
        orWhere(["parentID"=>$user->getId()])-> //статистика его агентов
        andWhere([">","date",$startDate])-> //дата должна быть больше чем дата старта периода
        andWhere(["<","date",$finishDate])-> //дана должна быт ьменьше текущего момента
        asArray()->
        all();
        $totalStat = [];
        $totalStat['er']=0;
        $totalStat['fd']=0;
        foreach ($stats as $stat){
               $totalStat["er"]=$totalStat["er"]+$stat["er_count"];
               $totalStat["fd"]=$totalStat["fd"]+$stat["fd_count"];
        }
        $totalStat["total"]=$totalStat["er"] + $totalStat["fd"];
        return $totalStat;
    }

    /*
     * Подсчитывает проценты относительно старых данных
     * если число отрицательно то и сам процент отрицательный.
     *
     * */
    function getPercent($curStats, $oldStats) {
        $response = [];
//        $this->var_export($curStats);
        if($curStats["fd"]!=0){
            $response["fd"] = intval($curStats["fd"]*100/$oldStats["fd"]-100);
        }else{
            $response["fd"] = 0;
        }

        if($curStats["er"]!=0){
            $response["er"] = intval($curStats["er"]*100/$oldStats["er"]-100);
        }else{
            $response["er"] = 0;
        }
        return $response;

    }



    //Все переменные должны быть в unixTime
    function getPercentDay($start, $finish, $time){
        $currentMoth = date("n",$time);
        $finishMoth = date("n",$finish);
        $startMoth = date("n", $start);

        $startDaysInMoth = date('t', $start);
        $finishDaysInMoth = date('t', $finish);

        $currentDay = date('j',$time);
        $startDay = date('j', $start);
        $finishDay = date('j',$finish);


        $countDays = $startDaysInMoth-$startDay + $finishDay;

        if($startMoth == $currentMoth){
            $daysLived = $currentDay-$startDay;
        }else{
            $daysLived = $currentDay + $startDaysInMoth - $startDay;
        }

        $notYetLivedDays = $countDays - $daysLived;
        $bad = $daysLived*100/$countDays;
        $better = $notYetLivedDays*100/$countDays;

        $response = ["bad"=>$bad, "better"=>$better];
        return $response;
    }

}
class GraphStatistics extends StatisticsDays{

    public $fd =[];
    public $er =[];
    public $time = [];
    public function init() {
        $this->getGraphStatistics(Yii::$app->user->identity, time());
        $this->toJsGraphStatistics();
    }

    function getGraphStatistics(IdentityInterface $user, $finishTime,$period = null){
        $moth = $this->curMoth();
        $day = $this->curDay();
        $year = $this->curYear();
        if($period == null or "moth"){
            if($moth==12){
                $moth = 1;
            }else{
                $moth = $moth-1;
            }
        }else
            if($period == "year"){
                $year = $year-1;
            }else if($period=="ever"){
                //??
            }
        $dateTime = DateTime::createFromFormat("j n Y", $day.' '. $moth.' '.$year);

//        $this->var_export($dateTime->format("j n Y"));
        $stats = TotalStatistics::find()->
        where(["userID"=>$user->getId()])-> //статистика самого юзера
        orWhere(["parentID"=>$user->getId()])-> //статистика его агентов
        andWhere([">","date",$dateTime->format("U")])-> //дата должна быть больше чем дата старта периода
        andWhere(["<","date",$finishTime])-> //дана должна быт ьменьше текущего момента
        asArray()->
        all();
        $startIndex1 = $dateTime->format("j");
        $endIndex1 = $dateTime->format('t');
        $nameMoth1 = $dateTime->format("M");

        $startIndex2 = 1;
        $endIndex2 = date('j', $finishTime);
        $nameMoth2 = date("M",$finishTime);



        $response = [];
        for($i=$startIndex1; $i<=$endIndex1;$i=$i+2){
            $fd_sum = 0;
            $er_sum = 0;
            //суммируем все показатели дня $i
            foreach($stats as $stat){
                if(date("j",$stat['date']) == $i and date("M",$stat["date"])==$nameMoth1){
                    $fd_sum = $stat["fd_count"]+$fd_sum;
                    $er_sum = $stat["er_count"] + $er_sum;
                }
            }
            if($i==$startIndex1){
                $this->time[] = $nameMoth1.' '.$i;
                $this->fd[] = $fd_sum;
                $this->er[] = $er_sum;
//                $response[] = ["day"=>$nameMoth1.' '.$i, "fd"=>$fd_sum, "er"=>$er_sum];
            }else{
                $this->time[] = $i;
                $this->fd[] = $fd_sum;
                $this->er[] = $er_sum;
//                $response[] = ["day"=>$i, "fd"=>$fd_sum, "er"=>$er_sum];
            }

        }
        for($i=1; $i<=$endIndex2; $i=$i+2){
            $fd_sum = 0;
            $er_sum = 0;
            //суммируем все показатели дня $i
            foreach($stats as $stat){
                if(date("j",$stat['date']) == $i and date("M",$stat["date"])==$nameMoth2){
                    $fd_sum = $stat["fd_count"]+$fd_sum;
                    $er_sum = $stat["er_count"] + $er_sum;
                }
            }
            if($i==1){
                $this->time[] = $nameMoth2.' '.$i;
                $this->fd[] = $fd_sum;
                $this->er[] = $er_sum;
//                $response[] = ["day"=>$nameMoth2.' '.$i, "fd"=>$fd_sum, "er"=>$er_sum];
            }else{
                $this->time[] = $i;
                $this->fd[] = $fd_sum;
                $this->er[] = $er_sum;
//                $response[] = ["day"=>$i, "fd"=>$fd_sum, "er"=>$er_sum];
            }
        }
//        return $response;


    }

    public function toJsGraphStatistics(){
        $this->fd = json_encode($this->fd);
        $this->er = json_encode($this->er);
        $this->time = json_encode($this->time);
    }
}


/*
 * Занимаается преобразованиями общей статитстики за период(блок справа)
 *
 * */
class CirclePercent extends StatisticsDays {
    public $fd;
    public $er;

    public $fdValue;
    public $erValue;
    public $total;

    public function init()
    {
//        parent::init(); // TODO: Change the autogenerated stub
        if($this->total!=0){
            $this->fd = $this->fdValue*100/$this->total;
            $this->er = $this->erValue*100/$this->total;
        }else{
            $this->fd = 0;
            $this->er = 0;
        }
    }
}