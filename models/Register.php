<?php

namespace app\models;

use himiklab\yii2\recaptcha\ReCaptchaValidator2;
use function time;
use Yii;

/**
 * This is the model class for table "user".
 *
 * @property int $id
 * @property string $email
 * @property string $password_hash
 * @property string $purpose
 * @property string $country
 * @property string $city
 * @property int $user_type
 * @property string $access_token
 * @property string $name_organization
 * @property string $position
 * @property int $REQUESTED_FREE
 * @property string $FREE_STATUS
 * @property string $email_confirm_token
 * @property int $IS_ACTIVATED
 * @property int $IS_DEFAULT
 * @property int register_date
 * @property int last_visit
 * @property int update_at
 */
class Register extends \yii\db\ActiveRecord
{
    public $password; //пароль без хеша
    public $verify_code; //код для капчи
    public $confirm_password; //повтор email
    public $legal_term; //проверяет, согласен ли пользователь на legal terms
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'user';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['email', 'password', 'purpose', 'country', 'city', 'user_type', 'name_organization', 'confirm_password','verify_code'], 'required'],
            [['user_type', 'REQUESTED_FREE', 'IS_ACTIVATED', 'IS_DEFAULT'], 'integer'],
            [['email', 'password', 'purpose', 'country', 'city', 'name_organization', 'position', 'FREE_STATUS'], 'string', 'max' => 255],

            /*валидация введенного e-mail*/
            [['email'],'email'],
            [['email'], 'unique', 'targetClass' => self::className(), 'message' => 'This email address has already been taken.'],
            [['email'], 'string', 'max' => 255],

            /*валидация введенного пароля*/
            [['password'],'string','min'=>6,'message'=>'New password must contain at least 6 characters.'],
            [['password'],  'match', 'pattern' => '#^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{6,}$#', 'message'=>'New password must contain numbers, upper and lower case characters.'],
            [['confirm_password'], "compare", "compareAttribute"=>"password", "message"=>"Passwords don't match"],

            /*капча от гугл*/
            [['verify_code'], ReCaptchaValidator2::className(), 'uncheckedMessage' => 'Please confirm that you are not a bot.'],

            /*legal terms*/
            [['legal_term'], 'required'],
            [['legal_term'], 'compare','compareValue'=>1, 'message'=>'You must agree to the terms of service'],
            [['legal_term'], 'boolean'],

            /*request_free*/
            [['REQUESTED_FREE'], 'safe'],
            [['REQUESTED_FREE'], 'boolean'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'email' => 'Email',
            'password_hash' => 'Password Hash',
            'confirm_password'=>"Confirm password",
            'purpose' => 'Purpose',
            'country' => 'Country',
            'city' => 'City',
            'user_type' => 'User Type',
            'name_organization' => 'Name Organization',
            'position' => 'Position',
            'REQUESTED_FREE' => 'Free status',
            'FREE_STATUS' => 'Free Status',
            'IS_ACTIVATED' => 'Is Activated',
            'IS_DEFAULT' => 'Is Default',
            'legal_term' =>'I agree '
        ];
    }
    /*
     * Дополняет модель необходимыми паарметрами, которые не указаны в форме регистрации
     * */
    public function addParametersInModel() {
        $user = new User();

        $this->password_hash = $user->generatePasswordHash($this->password);
        $this->access_token = $user->generateAccessToken();
        $this->register_date = time();
        $this->update_at = time();
        $this->last_visit = 0;
        $this->email_confirm_token = Yii::$app->security->generateRandomString();
    }

    public function parameterDefautUser() {
        $this->id=null;
        $this->IS_DEFAULT = true;
        $this->IS_ACTIVATED = true;
        $this->FREE_STATUS = "PENDING";
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        $this->createDefaultKey();
    }

    /*
     * Создает дефолтовое значение ключа, для дефолтового пользователя
     * */
    public function createDefaultKey() {
        $key = new Keys();
        $key->value = Yii::$app->security->generateRandomString();
        $key->user_id = $this->id;
        $key->IS_ACTIVATED = $this->IS_ACTIVATED;
        $key->created = time();
        $key->save(false); //не проверяем т.к. генерируется автоматически.
    }







}
